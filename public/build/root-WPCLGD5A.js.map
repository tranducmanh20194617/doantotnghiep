{
  "version": 3,
  "sources": ["../../app/root.jsx", "../../node_modules/@apollo/src/link/context/index.ts"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/root.jsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/root.jsx\");\n}\n// REMIX HMR END\n\nimport { Links, LiveReload, Meta, Outlet, Scripts, ScrollRestoration } from \"@remix-run/react\";\n\n// @ts-ignore\nimport { setContext } from '@apollo/client/link/context';\n// @ts-ignore\nimport { ApolloClient, ApolloProvider, InMemoryCache, createHttpLink } from \"@apollo/client\";\nexport default function App() {\n  const httpLink = createHttpLink({\n    uri: 'http://localhost:4000/graphql'\n  });\n  const authLink = setContext((_, {\n    headers\n  }) => {\n    // get the authentication token from local storage if it exists\n    const token = localStorage.getItem('accessToken');\n    // return the headers to the context so httpLink can read them\n    return {\n      headers: {\n        ...headers,\n        authorization: token ? `Bearer ${token}` : \"\"\n      }\n    };\n  });\n  const client = new ApolloClient({\n    link: authLink.concat(httpLink),\n    cache: new InMemoryCache(),\n    defaultOptions: {\n      watchQuery: {\n        fetchPolicy: 'no-cache',\n        errorPolicy: 'ignore'\n      },\n      query: {\n        fetchPolicy: 'no-cache',\n        errorPolicy: 'all'\n      }\n    }\n  });\n\n  // @ts-ignore\n  return <html>\n    <head>\n      <meta charSet=\"utf-8\" />\n      <meta name=\"viewport\" content=\"width=device-width,initial-scale=1\" />\n      <link rel=\"stylesheet\" href=\"https://unpkg.com/@shopify/polaris@11.1.2/build/esm/styles.css\"></link>\n      {/* <link rel=\"stylesheet\" href=\"./routes/_index/style.css\" onload='this.media=\"all\"'></link> */}\n      <Meta />\n      <Links />\n    </head>\n    <body>\n    <ApolloProvider client={client}>\n      <Outlet />\n      <ScrollRestoration />\n      <LiveReload />\n      <Scripts />\n    </ApolloProvider>\n    </body>\n    </html>;\n}\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;", "import type { Operation, GraphQLRequest, NextLink } from \"../core/index.js\";\nimport { ApolloLink } from \"../core/index.js\";\nimport type { ObservableSubscription } from \"../../utilities/index.js\";\nimport { Observable } from \"../../utilities/index.js\";\nimport type { DefaultContext } from \"../../core/index.js\";\n\nexport type ContextSetter = (\n  operation: GraphQLRequest,\n  prevContext: DefaultContext\n) => Promise<DefaultContext> | DefaultContext;\n\nexport function setContext(setter: ContextSetter): ApolloLink {\n  return new ApolloLink((operation: Operation, forward: NextLink) => {\n    const { ...request } = operation;\n\n    return new Observable((observer) => {\n      let handle: ObservableSubscription;\n      let closed = false;\n      Promise.resolve(request)\n        .then((req) => setter(req, operation.getContext()))\n        .then(operation.setContext)\n        .then(() => {\n          // if the observer is already closed, no need to subscribe.\n          if (closed) return;\n          handle = forward(operation).subscribe({\n            next: observer.next.bind(observer),\n            error: observer.error.bind(observer),\n            complete: observer.complete.bind(observer),\n          });\n        })\n        .catch(observer.error.bind(observer));\n\n      return () => {\n        closed = true;\n        if (handle) handle.unsubscribe();\n      };\n    });\n  });\n}\n"],
  "mappings": "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",
  "names": []
}
