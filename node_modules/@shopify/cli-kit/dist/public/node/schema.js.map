{"version":3,"file":"schema.js","sourceRoot":"","sources":["../../../src/public/node/schema.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,SAAS,EAAE,WAAW,EAAc,CAAC,EAAC,MAAM,KAAK,CAAA;AAEzD,OAAO,EAAC,CAAC,IAAI,GAAG,EAAC,MAAM,KAAK,CAAA;AAE5B;;;;;GAKG;AACH,MAAM,UAAU,UAAU,CAAC,MAAkB;IAC3C,IAAI,MAAM,YAAY,SAAS,EAAE;QAC/B,MAAM,KAAK,GAAG,MAAM,CAAC,KAAK,CAAA;QAC1B,MAAM,WAAW,GAAG,MAAM,CAAC,WAAW,CACpC,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,KAAK,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,EAAE,UAAU,CAAC,KAAmB,CAAC,CAAC,CAAC,CACpF,CAAA;QACD,OAAO,CAAC,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,MAAM,EAAE,CAAA;KACtC;SAAM,IAAI,MAAM,YAAY,WAAW,EAAE;QACxC,OAAO,UAAU,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,QAAQ,EAAE,CAAA;KACpD;SAAM;QACL,OAAO,MAAM,CAAA;KACd;AACH,CAAC;AAED;;;;;GAKG;AACH,MAAM,UAAU,cAAc,CAAC,MAAwB;IACrD,OAAO,MAAM;SACV,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE,CACb,KAAK,CAAC,IAAI;SACP,IAAI,CAAC,GAAG,CAAC;SACT,MAAM,CAAC,IAAI,CAAC;SACZ,MAAM,CAAC,KAAK,CAAC,OAAO,IAAI,cAAc,CAAC,CAC3C;SACA,IAAI,CAAC,IAAI,CAAC,CAAA;AACf,CAAC","sourcesContent":["import {ZodObject, ZodOptional, ZodTypeAny, z} from 'zod'\n\nexport {z as zod} from 'zod'\n\n/**\n * Returns a new schema that is the same as the input schema, but with all nested schemas set to strict.\n *\n * @param schema - The schema to make strict.\n * @returns The result strict schema.\n */\nexport function deepStrict(schema: ZodTypeAny): ZodTypeAny {\n  if (schema instanceof ZodObject) {\n    const shape = schema.shape\n    const strictShape = Object.fromEntries(\n      Object.entries(shape).map(([key, value]) => [key, deepStrict(value as ZodTypeAny)]),\n    )\n    return z.object(strictShape).strict()\n  } else if (schema instanceof ZodOptional) {\n    return deepStrict(schema._def.innerType).optional()\n  } else {\n    return schema\n  }\n}\n\n/**\n * Returns a human-readable string of the list of zod errors.\n *\n * @param errors - The list of zod errors.\n * @returns The human-readable string.\n */\nexport function errorsToString(errors: z.ZodIssueBase[]): string {\n  return errors\n    .map((error) =>\n      error.path\n        .join('.')\n        .concat(': ')\n        .concat(error.message ?? 'Unknow error'),\n    )\n    .join('\\n')\n}\n"]}