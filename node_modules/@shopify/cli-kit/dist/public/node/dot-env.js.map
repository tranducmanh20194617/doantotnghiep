{"version":3,"file":"dot-env.js","sourceRoot":"","sources":["../../../src/public/node/dot-env.ts"],"names":[],"mappings":"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","sourcesContent":["import {AbortError} from './error.js'\nimport {fileExists, readFile, writeFile} from './fs.js'\nimport {outputDebug, outputContent, outputToken} from '../../public/node/output.js'\nimport {parse} from 'dotenv'\n\n/**\n * This interface represents a .env file.\n */\nexport interface DotEnvFile {\n  /**\n   * Path to the .env file.\n   */\n  path: string\n  /**\n   * Variables of the .env file.\n   */\n  variables: {[name: string]: string}\n}\n\n/**\n * Reads and parses a .env file.\n * @param path - Path to the .env file\n * @returns An in-memory representation of the .env file.\n */\nexport async function readAndParseDotEnv(path: string): Promise<DotEnvFile> {\n  outputDebug(outputContent`Reading the .env file at ${outputToken.path(path)}`)\n  if (!(await fileExists(path))) {\n    throw new AbortError(`The environment file at ${path} does not exist.`)\n  }\n  const content = await readFile(path)\n  return {\n    path,\n    variables: parse(content),\n  }\n}\n\n/**\n * Writes a .env file to disk.\n * @param file - .env file to be written.\n */\nexport async function writeDotEnv(file: DotEnvFile): Promise<void> {\n  const fileContent = Object.entries(file.variables)\n    .map(([key, value]) => createDotEnvFileLine(key, value))\n    .join('\\n')\n\n  await writeFile(file.path, fileContent)\n}\n\n/**\n * Given an .env file content, generates a new one with new values\n * without removing already existing lines.\n * @param envFileContent - .env file contents.\n * @param updatedValues - object containing new env variables values.\n */\nexport function patchEnvFile(\n  envFileContent: string | null,\n  updatedValues: {[key: string]: string | undefined},\n): string {\n  const outputLines: string[] = []\n  const envFileLines = envFileContent === null ? [] : envFileContent.split('\\n')\n\n  const alreadyPresentKeys: string[] = []\n\n  let multilineVariable:\n    | {\n        key: string\n        value: string\n        quote: string\n      }\n    | undefined\n\n  for (const line of envFileLines) {\n    if (multilineVariable) {\n      if (line.endsWith(multilineVariable.quote)) {\n        let lineToWrite = createDotEnvFileLine(\n          multilineVariable.key,\n          multilineVariable.value + line.slice(0, -1),\n          multilineVariable.quote,\n        )\n        const newValue = updatedValues[multilineVariable.key]\n        if (newValue) {\n          alreadyPresentKeys.push(multilineVariable.key)\n          lineToWrite = createDotEnvFileLine(multilineVariable.key, newValue)\n        }\n        outputLines.push(lineToWrite)\n        multilineVariable = undefined\n      } else {\n        multilineVariable.value += `${line}\\n`\n      }\n      continue\n    }\n\n    const match = line.match(/^([^=:#]+?)[=:](.*)/)\n    let lineToWrite = line\n\n    if (match) {\n      const key = match[1]!.trim()\n      const value = (match[2] || '')!.trim()\n\n      if (/^[\"'`]/.test(value) && !value.endsWith(value[0]!)) {\n        multilineVariable = {\n          key,\n          value: `${value.slice(1)}\\n`,\n          quote: value[0]!,\n        }\n        continue\n      }\n\n      const newValue = updatedValues[key]\n      if (newValue) {\n        alreadyPresentKeys.push(key)\n        lineToWrite = createDotEnvFileLine(key, newValue)\n      }\n    }\n\n    outputLines.push(lineToWrite)\n  }\n\n  if (multilineVariable) {\n    throw new AbortError(`Multi-line environment variable '${multilineVariable.key}' is not properly enclosed.`)\n  }\n\n  for (const [patchKey, updatedValue] of Object.entries(updatedValues)) {\n    if (!alreadyPresentKeys.includes(patchKey)) {\n      outputLines.push(createDotEnvFileLine(patchKey, updatedValue))\n    }\n  }\n\n  return outputLines.join('\\n')\n}\n\nexport function createDotEnvFileLine(key: string, value?: string, quote?: string): string {\n  if (quote) {\n    return `${key}=${quote}${value}${quote}`\n  }\n  if (value && value.includes('\\n')) {\n    const quoteCharacter = ['\"', \"'\", '`'].find((char) => !value.includes(char))\n\n    if (!quoteCharacter) {\n      throw new AbortError(`The environment file patch has an env value that can't be surrounded by quotes: ${value}`)\n    }\n\n    return `${key}=${quoteCharacter}${value}${quoteCharacter}`\n  }\n  return `${key}=${value}`\n}\n"]}