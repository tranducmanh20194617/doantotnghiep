{"version":3,"file":"InfoTable.test.js","sourceRoot":"","sources":["../../../../../../src/private/node/ui/components/Prompts/InfoTable.test.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAC,SAAS,EAAC,MAAM,gBAAgB,CAAA;AACxC,OAAO,EAAC,QAAQ,EAAC,MAAM,sCAAsC,CAAA;AAC7D,OAAO,EAAC,MAAM,EAAC,MAAM,wBAAwB,CAAA;AAC7C,OAAO,EAAC,QAAQ,EAAE,MAAM,EAAE,IAAI,EAAC,MAAM,QAAQ,CAAA;AAC7C,OAAO,KAAK,MAAM,OAAO,CAAA;AAEzB,QAAQ,CAAC,WAAW,EAAE,KAAK,IAAI,EAAE;IAC/B,IAAI,CAAC,+CAA+C,EAAE,KAAK,IAAI,EAAE;QAC/D,MAAM,EAAC,SAAS,EAAC,GAAG,MAAM,CACxB,oBAAC,SAAS,IACR,KAAK,EAAE;gBACL,UAAU,EAAE,CAAC,MAAM,EAAE,OAAO,CAAC;gBAC7B,4BAA4B,EAAE,CAAC,CAAC,UAAU,EAAE,EAAC,IAAI,EAAE,EAAC,KAAK,EAAE,SAAS,EAAE,GAAG,EAAE,qBAAqB,EAAC,EAAC,CAAC,CAAC;aACrG,GACD,CACH,CAAA;QAED,MAAM,CAAC,QAAQ,CAAC,SAAS,EAAG,CAAC,CAAC,CAAC,qBAAqB,CAAC;;;;;;;;KAQpD,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;IAEF,IAAI,CAAC,gCAAgC,EAAE,KAAK,IAAI,EAAE;QAChD,MAAM,EAAC,SAAS,EAAC,GAAG,MAAM,CACxB,oBAAC,SAAS,IACR,KAAK,EAAE;gBACL,EAAE,EAAE,CAAC,MAAM,EAAE,OAAO,CAAC;aACtB,GACD,CACH,CAAA;QAED,MAAM,CAAC,QAAQ,CAAC,SAAS,EAAG,CAAC,CAAC,CAAC,qBAAqB,CAAC;;;KAGpD,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;IAEF,IAAI,CAAC,qEAAqE,EAAE,KAAK,IAAI,EAAE;QACrF,MAAM,EAAC,SAAS,EAAC,GAAG,MAAM,CACxB,oBAAC,SAAS,IACR,KAAK,EAAE;gBACL;oBACE,MAAM,EAAE,QAAQ;oBAChB,KAAK,EAAE,CAAC,MAAM,CAAC;oBACf,cAAc,EAAE,OAAO;iBACxB;aACF,GACD,CACH,CAAA;QAED,MAAM,CAAC,QAAQ,CAAC,SAAS,EAAG,CAAC,CAAC,CAAC,qBAAqB,CAAC;;;KAGpD,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;IAEF,IAAI,CAAC,0EAA0E,EAAE,KAAK,IAAI,EAAE;QAC1F,MAAM,EAAC,SAAS,EAAC,GAAG,MAAM,CACxB,oBAAC,SAAS,IACR,KAAK,EAAE;gBACL;oBACE,MAAM,EAAE,QAAQ;oBAChB,KAAK,EAAE,EAAE;oBACT,cAAc,EAAE,OAAO;iBACxB;aACF,GACD,CACH,CAAA;QAED,MAAM,CAAC,SAAS,EAAG,CAAC,CAAC,qBAAqB,CAAC;;;KAG1C,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;AACJ,CAAC,CAAC,CAAA","sourcesContent":["import {InfoTable} from './InfoTable.js'\nimport {unstyled} from '../../../../../public/node/output.js'\nimport {render} from '../../../testing/ui.js'\nimport {describe, expect, test} from 'vitest'\nimport React from 'react'\n\ndescribe('InfoTable', async () => {\n  test('renders a horizontal table with bullet points', async () => {\n    const {lastFrame} = render(\n      <InfoTable\n        table={{\n          'header 1': ['some', 'items'],\n          'header 2\\nlonger text here': [['one item', {link: {label: 'Shopify', url: 'https://shopify.com'}}]],\n        }}\n      />,\n    )\n\n    expect(unstyled(lastFrame()!)).toMatchInlineSnapshot(`\n      \"Header 1\n      • some\n      • items\n\n      Header 2\n      longer text here\n      • one item Shopify ( https://shopify.com )\"\n    `)\n  })\n\n  test('supports an empty header value', async () => {\n    const {lastFrame} = render(\n      <InfoTable\n        table={{\n          '': ['some', 'items'],\n        }}\n      />,\n    )\n\n    expect(unstyled(lastFrame()!)).toMatchInlineSnapshot(`\n      \"• some\n      • items\"\n    `)\n  })\n\n  test('when the list of items has elements doesnt render the empty message', async () => {\n    const {lastFrame} = render(\n      <InfoTable\n        table={[\n          {\n            header: 'header',\n            items: ['item'],\n            emptyItemsText: 'empty',\n          },\n        ]}\n      />,\n    )\n\n    expect(unstyled(lastFrame()!)).toMatchInlineSnapshot(`\n      \"Header\n      • item\"\n    `)\n  })\n\n  test('when the list of items is empty renders the empty message subdued if set', async () => {\n    const {lastFrame} = render(\n      <InfoTable\n        table={[\n          {\n            header: 'header',\n            items: [],\n            emptyItemsText: 'empty',\n          },\n        ]}\n      />,\n    )\n\n    expect(lastFrame()!).toMatchInlineSnapshot(`\n      \"\u001b[1mHeader\u001b[22m\n      \u001b[2mempty\u001b[22m\"\n    `)\n  })\n})\n"]}