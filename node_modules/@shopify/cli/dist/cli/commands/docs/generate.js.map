{"version":3,"file":"generate.js","sourceRoot":"","sources":["../../../../src/cli/commands/docs/generate.ts"],"names":[],"mappings":"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","sourcesContent":["import Command from '@shopify/cli-kit/node/base-command'\nimport {Command as oclifCommand} from '@oclif/core'\nimport {mkdir, rmdir, writeFile} from '@shopify/cli-kit/node/fs'\nimport {cwd, joinPath} from '@shopify/cli-kit/node/path'\nimport {outputInfo} from '@shopify/cli-kit/node/output'\n\nconst docsPath = joinPath(cwd(), '/docs-shopify.dev/commands')\n\nexport type CommandWithMarkdown = oclifCommand.Loadable & {descriptionWithMarkdown?: string}\n\nexport interface CommandData {\n  commandName: string\n  fileName: string\n  interfaceName: string\n  hasTopic: boolean\n  topic: string | undefined\n  hasFlags: boolean\n}\n\nexport default class DocsGenerate extends Command {\n  static description = 'Generate CLI commands documentation'\n  static hidden = true\n\n  async run(): Promise<void> {\n    const commands = this.config.commands as CommandWithMarkdown[]\n\n    // Remove all files and recreate the folder. To make sure we don't leave any orphaned files.\n    await rmdir(docsPath)\n    await mkdir(docsPath)\n\n    // Short by length to ensure that we first generate the interfaces for the parent topics to detect hidden ones.\n    const sortedCommands = commands\n      .sort((ca, cb) => ca.id.length - cb.id.length)\n      .filter((command) => !isHidden(command))\n    const promises = sortedCommands.flatMap((command) => {\n      const commandData = extractCommandData(command)\n      return [\n        writeCommandFlagInterface(command, commandData),\n        writeCommandUsageExampleFile(command, commandData),\n        writeCommandDocumentation(command, commandData),\n      ]\n    })\n\n    await Promise.all(promises)\n  }\n}\n\n// By default we hide oclif commands that are not part of the Shopify CLI documentation\nconst hiddenTopics: string[] = ['commands', 'help', 'plugins']\n\nfunction isHidden(command: oclifCommand.Loadable) {\n  // Some commands rely on the hidden property of the parent topic, but is not returned in the oclif command object\n  if (command.hidden) {\n    hiddenTopics.push(command.id)\n    return true\n  }\n\n  // User plugins are installed locally and are not part of the Shopify CLI documentation\n  if (command.pluginType === 'user') return true\n  return hiddenTopics.some((topic) => command.id.startsWith(`${topic}:`))\n}\n\nexport function extractCommandData(command: CommandWithMarkdown) {\n  const commandName = command.id.replace(/[:]/g, ' ')\n  const fileName = command.id.replace(/[:]/g, '-')\n  const interfaceName = command.id.replace(/[:-]/g, '')\n  const hasTopic = command.id.includes(':')\n  const topic = command.id.split(':')[0]\n  const hasFlags = command.flags && Object.keys(command.flags).length > 0\n  return {commandName, fileName, interfaceName, hasTopic, topic, hasFlags}\n}\n\n// Generates the documentation for a command and writes it to a file (also a file with an example usage of the command)\nexport async function writeCommandDocumentation(\n  command: CommandWithMarkdown,\n  {commandName, fileName, interfaceName, hasTopic, topic, hasFlags}: CommandData,\n) {\n  const flagDoc = `\n  {\n    title: 'Flags',\n    description: 'The following flags are available for the \\`${commandName}\\` command:',\n    type: '${interfaceName}',\n  },`\n\n  const description = command.descriptionWithMarkdown ?? command.description\n  const string = `// This is an autogenerated file. Don't edit this file manually.\nimport {ReferenceEntityTemplateSchema} from '@shopify/generate-docs'\n\nconst data: ReferenceEntityTemplateSchema = {\n  name: '${commandName}',\n  description: \\`${description?.replace(/`/g, '\\\\`')}\\`,\n  overviewPreviewDescription: \\`${command.summary ?? description}\\`,\n  type: 'command',\n  isVisualComponent: false,\n  defaultExample: {\n    codeblock: {\n      tabs: [\n        {\n          title: '${commandName}',\n          code: './examples/${fileName}.example.sh',\n          language: 'bash',\n        },\n      ],\n      title: '${commandName}',\n    },\n  },\n  definitions: [${hasFlags ? flagDoc : ''}\n  ],\n  category: 'Commands',\n  subCategory: ${hasTopic ? `'${topic}'` : `'common'`},\n  related: [\n  ],\n}\n\nexport default data`\n\n  await writeFile(`${docsPath}/${fileName}.doc.ts`, string)\n  outputInfo(`Generated docs for ${commandName}`)\n}\n\n// Generates an interface for the flags of a command and writes it to a file\nexport async function writeCommandFlagInterface(\n  command: oclifCommand.Loadable,\n  {fileName, interfaceName}: CommandData,\n) {\n  const flagsDetails = Object.keys(command.flags)\n    .map((flagName) => {\n      const flag = command.flags[flagName]\n      if (!flag) return\n      if (flag.hidden) return\n      const flagDescription = flag.description || ''\n      const char = flag.char ? `-${flag.char}, ` : ''\n      const type = flag.type === 'option' ? 'string' : \"''\"\n      const value = flag.type === 'option' ? ' <value>' : ''\n      const optional = flag.required ? '' : '?'\n      const flagContent = `  /**\n   * ${flagDescription}\n   */\n  '${char}--${flagName}${value}'${optional}: ${type}`\n      // Example output: '-c, --config <value>'?: string\n      return flagContent\n    })\n    .filter((str) => str && str?.length > 0)\n    .join('\\n\\n')\n\n  const commandContent = `// This is an autogenerated file. Don't edit this file manually.\nexport interface ${interfaceName} {\n${flagsDetails}\n}\n`\n  await mkdir(`${docsPath}/interfaces`)\n  await writeFile(`${docsPath}/interfaces/${fileName}.interface.ts`, commandContent)\n}\n\n// Generates a file with an example usage of a command\nexport async function writeCommandUsageExampleFile(command: CommandWithMarkdown, {fileName, commandName}: CommandData) {\n  let usage = ''\n  if (typeof command.usage === 'string') {\n    usage = command.usage\n  } else if (Array.isArray(command.usage)) {\n    usage = command.usage.join('\\n\\n')\n  } else {\n    usage = `shopify ${commandName} ${command.flags ? '[flags]' : ''}`\n  }\n  await mkdir(`${docsPath}/examples`)\n  await writeFile(`${docsPath}/examples/${fileName}.example.sh`, usage)\n}\n"]}