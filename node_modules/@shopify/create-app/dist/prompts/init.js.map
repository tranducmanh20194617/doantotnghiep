{"version":3,"file":"init.js","sourceRoot":"","sources":["../../src/prompts/init.ts"],"names":[],"mappings":"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","sourcesContent":["import {generateRandomNameForSubdirectory} from '@shopify/cli-kit/node/fs'\nimport {renderText, renderSelectPrompt, renderTextPrompt} from '@shopify/cli-kit/node/ui'\n\ninterface InitOptions {\n  name?: string\n  template?: string\n  flavor?: string\n  directory: string\n}\n\ninterface InitOutput {\n  name: string\n  template: string\n  // e.g. 'remix'\n  templateType: PredefinedTemplate | 'custom'\n}\n\ninterface TemplateBranch {\n  branch: string\n  label: string\n}\ninterface Template {\n  url: string\n  label?: string\n  visible: boolean\n  branches?: {\n    prompt: string\n    options: {[key: string]: TemplateBranch}\n  }\n}\n\n// Eventually this list should be taken from a remote location\n// That way we don't have to update the CLI every time we add a template\nexport const templates = {\n  remix: {\n    url: 'https://github.com/Shopify/shopify-app-template-remix',\n    label: 'Start with Remix (recommended)',\n    visible: true,\n    branches: {\n      prompt: 'For your Remix template, which language do you want?',\n      options: {\n        javascript: {branch: 'javascript', label: 'JavaScript'},\n        typescript: {branch: 'main', label: 'TypeScript'},\n      },\n    },\n  } as Template,\n  none: {\n    url: 'https://github.com/Shopify/shopify-app-template-none',\n    label: 'Start by adding your first extension',\n    visible: true,\n  } as Template,\n  node: {\n    url: 'https://github.com/Shopify/shopify-app-template-node',\n    visible: false,\n  } as Template,\n  php: {\n    url: 'https://github.com/Shopify/shopify-app-template-php',\n    visible: false,\n  } as Template,\n  ruby: {\n    url: 'https://github.com/Shopify/shopify-app-template-ruby',\n    visible: false,\n  } as Template,\n} as const\nexport type PredefinedTemplate = keyof typeof templates\n\nexport const allTemplates = Object.keys(templates) as Readonly<PredefinedTemplate[]>\nexport const visibleTemplates = allTemplates.filter((key) => templates[key].visible) as Readonly<PredefinedTemplate[]>\n\nconst templateOptionsInOrder = ['remix', 'none'] as const\n\nconst init = async (options: InitOptions): Promise<InitOutput> => {\n  let name = options.name\n  let template = options.template\n  const flavor = options.flavor\n\n  const defaults = {\n    name: await generateRandomNameForSubdirectory({suffix: 'app', directory: options.directory}),\n    template: templates.remix.url,\n  } as const\n\n  let welcomed = false\n\n  if (!name) {\n    renderText({text: '\\nWelcome. Let’s get started by naming your app project. You can change it later.'})\n    welcomed = true\n    name = await renderTextPrompt({\n      message: 'Your project name?',\n      defaultValue: defaults.name,\n      validate: (value) => {\n        if (value.length === 0) {\n          return \"App name can't be empty\"\n        }\n        if (value.length > 30) {\n          return 'Enter a shorter name (30 character max.)'\n        }\n        if (value.toLowerCase().includes('shopify')) {\n          return \"App name can't include the word 'shopify'\"\n        }\n      },\n    })\n  }\n\n  if (!template) {\n    if (!welcomed) {\n      renderText({text: '\\nWelcome. Let’s get started by choosing a template for your app project.'})\n      welcomed = true\n    }\n    template = await renderSelectPrompt({\n      choices: templateOptionsInOrder.map((key) => {\n        return {\n          label: templates[key].label || key,\n          value: key,\n        }\n      }),\n      message: 'Get started building your app:',\n      defaultValue: allTemplates.find((key) => templates[key].url === defaults.template),\n    })\n  }\n\n  const answers: InitOutput = {\n    ...options,\n    name,\n    template,\n    templateType: isPredefinedTemplate(template) ? template : 'custom',\n  }\n\n  let selectedUrl: string | undefined\n  let branch: string | undefined\n  if (answers.templateType !== 'custom') {\n    const selectedTemplate = templates[answers.templateType]\n    selectedUrl = selectedTemplate.url\n\n    if (selectedTemplate.branches) {\n      if (flavor) {\n        branch = selectedTemplate.branches.options[flavor]?.branch\n      } else {\n        branch = await renderSelectPrompt({\n          message: selectedTemplate.branches.prompt || 'Choose a flavor:',\n          choices: Object.entries(selectedTemplate.branches.options).map(([_key, branch]) => ({\n            value: branch.branch,\n            label: branch.label,\n          })),\n        })\n      }\n    }\n  }\n\n  if (branch) {\n    selectedUrl += `#${branch}`\n  }\n\n  answers.template = selectedUrl || answers.template || defaults.template\n\n  return answers\n}\n\nexport default init\n\nexport function isPredefinedTemplate(template: string): template is PredefinedTemplate {\n  return allTemplates.includes(template as PredefinedTemplate)\n}\n"]}