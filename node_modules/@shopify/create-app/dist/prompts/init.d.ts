interface InitOptions {
    name?: string;
    template?: string;
    flavor?: string;
    directory: string;
}
interface InitOutput {
    name: string;
    template: string;
    templateType: PredefinedTemplate | 'custom';
}
interface TemplateBranch {
    branch: string;
    label: string;
}
interface Template {
    url: string;
    label?: string;
    visible: boolean;
    branches?: {
        prompt: string;
        options: {
            [key: string]: TemplateBranch;
        };
    };
}
export declare const templates: {
    readonly remix: Template;
    readonly none: Template;
    readonly node: Template;
    readonly php: Template;
    readonly ruby: Template;
};
export type PredefinedTemplate = keyof typeof templates;
export declare const allTemplates: readonly ("remix" | "none" | "node" | "php" | "ruby")[];
export declare const visibleTemplates: readonly ("remix" | "none" | "node" | "php" | "ruby")[];
declare const init: (options: InitOptions) => Promise<InitOutput>;
export default init;
export declare function isPredefinedTemplate(template: string): template is PredefinedTemplate;
