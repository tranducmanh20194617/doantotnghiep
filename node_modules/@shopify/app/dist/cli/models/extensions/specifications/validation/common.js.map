{"version":3,"file":"common.js","sourceRoot":"","sources":["../../../../../../src/cli/models/extensions/specifications/validation/common.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,UAAU,EAAE,WAAW,EAAC,MAAM,mCAAmC,CAAA;AACzE,OAAO,EAAC,GAAG,EAAC,MAAM,8BAA8B,CAAA;AAEhD,kDAAkD;AAClD,MAAM,WAAW,GAAG,wDAAwD,CAAA;AAC5E,0GAA0G;AAC1G,MAAM,QAAQ,GACZ,4JAA4J,CAAA;AAE9J,MAAM,CAAC,MAAM,mBAAmB,GAAG,CAAC,GAAY,EAAE,EAAE,CAClD,OAAO,GAAG,KAAK,QAAQ,IAAI,GAAG,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAA;AAE9E,MAAM,CAAC,MAAM,kBAAkB,GAAG,WAAW,CAAC,GAAG,CAAC,MAAM,EAAE,EAAE;IAC1D,SAAS,EAAE,IAAI;IACf,OAAO,EAAE,6BAA6B;CACvC,CAAC,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,GAAG,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,EAAC,OAAO,EAAE,oCAAoC,EAAC,CAAC,CAAA;AAEvF,MAAM,CAAC,MAAM,aAAa,GAAG,GAAG,CAAC,KAAK,CACpC;IACE,GAAG,CAAC,MAAM,CAAC,EAAC,kBAAkB,EAAE,sBAAsB,EAAC,CAAC,CAAC,KAAK,CAAC,UAAU,EAAE;QACzE,OAAO,EAAE,uFAAuF;KACjG,CAAC;IACF,GAAG,CAAC,MAAM,CAAC,EAAC,kBAAkB,EAAE,sBAAsB,EAAC,CAAC,CAAC,KAAK,CAAC,WAAW,EAAE;QAC1E,OAAO,EAAE,uFAAuF;KACjG,CAAC;IACF,GAAG,CAAC,MAAM,CAAC,EAAC,kBAAkB,EAAE,sBAAsB,EAAC,CAAC,CAAC,KAAK,CAAC,QAAQ,EAAE;QACvE,OAAO,EAAE,uFAAuF;KACjG,CAAC;CACH,EACD,EAAC,kBAAkB,EAAE,oBAAoB,EAAC,CAC3C,CAAA","sourcesContent":["import {httpsRegex, validateUrl} from '../../../app/validation/common.js'\nimport {zod} from '@shopify/cli-kit/node/schema'\n\n// example PubSub URI - pubsub://{project}:{topic}\nconst pubSubRegex = /^pubsub:\\/\\/(?<gcp_project_id>[^:]+):(?<gcp_topic>.+)$/\n// example Eventbridge ARN - arn:aws:events:{region}::event-source/aws.partner/shopify.com/{app_id}/{path}\nconst arnRegex =\n  /^arn:aws:events:(?<aws_region>[a-z]{2}-[a-z]+-[0-9]+)::event-source\\/aws\\.partner\\/shopify\\.com(\\.test)?\\/(?<api_client_id>\\d+)\\/(?<event_source_name>.+)$/\n\nexport const removeTrailingSlash = (arg: unknown) =>\n  typeof arg === 'string' && arg.endsWith('/') ? arg.replace(/\\/+$/, '') : arg\n\nexport const ensureHttpsOnlyUrl = validateUrl(zod.string(), {\n  httpsOnly: true,\n  message: 'Only https urls are allowed',\n}).refine((url) => !url.endsWith('/'), {message: 'URL canâ€™t end with a forward slash'})\n\nexport const UriValidation = zod.union(\n  [\n    zod.string({invalid_type_error: 'Value must be string'}).regex(httpsRegex, {\n      message: \"URI isn't correct URI format of https://, pubsub://{project}:topic or Eventbridge ARN\",\n    }),\n    zod.string({invalid_type_error: 'Value must be string'}).regex(pubSubRegex, {\n      message: \"URI isn't correct URI format of https://, pubsub://{project}:topic or Eventbridge ARN\",\n    }),\n    zod.string({invalid_type_error: 'Value must be string'}).regex(arnRegex, {\n      message: \"URI isn't correct URI format of https://, pubsub://{project}:topic or Eventbridge ARN\",\n    }),\n  ],\n  {invalid_type_error: 'Invalid URI format'},\n)\n"]}