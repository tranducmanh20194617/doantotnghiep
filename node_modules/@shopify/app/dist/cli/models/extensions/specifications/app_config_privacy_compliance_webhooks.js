import { ComplianceTopic, WebhookSchema, WebhookSimplifyConfig } from './app_config_webhook.js';
import { createConfigExtensionSpecification } from '../specification.js';
import { Flag } from '../../../services/dev/fetch.js';
import { compact, getPathValue } from '@shopify/cli-kit/common/object';
const PrivacyComplianceWebhooksTransformConfig = {
    forward: (content, options) => transformToPrivacyComplianceWebhooksModule(content),
    reverse: (content, options) => transformFromPrivacyComplianceWebhooksModule(content, options),
};
export const PrivacyComplianceWebhooksSpecIdentifier = 'privacy_compliance_webhooks';
// Uses the same schema as the webhooks specs because its content is nested under the same webhooks section
const appPrivacyComplienceSpec = createConfigExtensionSpecification({
    identifier: PrivacyComplianceWebhooksSpecIdentifier,
    schema: WebhookSchema,
    transformConfig: PrivacyComplianceWebhooksTransformConfig,
    simplify: WebhookSimplifyConfig,
});
export default appPrivacyComplienceSpec;
function transformToPrivacyComplianceWebhooksModule(content) {
    const webhooks = getPathValue(content, 'webhooks');
    return compact({
        customers_redact_url: getCustomersDeletionUri(webhooks),
        customers_data_request_url: getCustomersDataRequestUri(webhooks),
        shop_redact_url: getShopDeletionUri(webhooks),
    });
}
function transformFromPrivacyComplianceWebhooksModule(content, options) {
    const customersRedactUrl = getPathValue(content, 'customers_redact_url');
    const customersDataRequestUrl = getPathValue(content, 'customers_data_request_url');
    const shopRedactUrl = getPathValue(content, 'shop_redact_url');
    if (options?.flags?.includes(Flag.DeclarativeWebhooks)) {
        const webhooks = [];
        if (customersRedactUrl) {
            webhooks.push({ compliance_topics: [ComplianceTopic.CustomersRedact], uri: customersRedactUrl });
        }
        if (customersDataRequestUrl) {
            webhooks.push({ compliance_topics: [ComplianceTopic.CustomersDataRequest], uri: customersDataRequestUrl });
        }
        if (shopRedactUrl) {
            webhooks.push({ compliance_topics: [ComplianceTopic.ShopRedact], uri: shopRedactUrl });
        }
        if (webhooks.length === 0)
            return {};
        return { webhooks: { subscriptions: webhooks, privacy_compliance: undefined } };
    }
    if (customersRedactUrl || customersDataRequestUrl || shopRedactUrl) {
        return {
            webhooks: {
                privacy_compliance: {
                    ...(customersRedactUrl ? { customer_deletion_url: customersRedactUrl } : {}),
                    ...(customersDataRequestUrl ? { customer_data_request_url: customersDataRequestUrl } : {}),
                    ...(shopRedactUrl ? { shop_deletion_url: shopRedactUrl } : {}),
                },
            },
        };
    }
    return {};
}
function getComplianceUri(webhooks, complianceTopic) {
    return webhooks.subscriptions?.find((subscription) => subscription.compliance_topics?.includes(complianceTopic))?.uri;
}
function getCustomersDeletionUri(webhooks) {
    return getComplianceUri(webhooks, 'customers/redact') || webhooks?.privacy_compliance?.customer_deletion_url;
}
function getCustomersDataRequestUri(webhooks) {
    return getComplianceUri(webhooks, 'customers/data_request') || webhooks?.privacy_compliance?.customer_data_request_url;
}
function getShopDeletionUri(webhooks) {
    return getComplianceUri(webhooks, 'shop/redact') || webhooks?.privacy_compliance?.shop_deletion_url;
}
//# sourceMappingURL=app_config_privacy_compliance_webhooks.js.map