{"version":3,"file":"app_config_app_access.js","sourceRoot":"","sources":["../../../../../src/cli/models/extensions/specifications/app_config_app_access.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,WAAW,EAAC,MAAM,gCAAgC,CAAA;AAC1D,OAAO,EAAuB,kCAAkC,EAAC,MAAM,qBAAqB,CAAA;AAC5F,OAAO,EAAC,wBAAwB,EAAC,MAAM,gCAAgC,CAAA;AACvE,OAAO,EAAC,GAAG,EAAC,MAAM,8BAA8B,CAAA;AAEhD,MAAM,eAAe,GAAG,GAAG,CAAC,MAAM,CAAC;IACjC,MAAM,EAAE,GAAG;SACR,MAAM,CAAC;QACN,KAAK,EAAE,GAAG;aACP,MAAM,CAAC;YACN,eAAe,EAAE,GAAG,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE,GAAG,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE;YACtF,8BAA8B,EAAE,GAAG,CAAC,OAAO,EAAE,CAAC,QAAQ,EAAE;SACzD,CAAC;aACD,QAAQ,EAAE;KACd,CAAC;SACD,QAAQ,EAAE;IACb,aAAa,EAAE,GAAG;SACf,MAAM,CAAC;QACN,MAAM,EAAE,GAAG;aACR,MAAM,EAAE;aACR,SAAS,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,wBAAwB,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC;aAC7D,QAAQ,EAAE;QACb,uBAAuB,EAAE,GAAG,CAAC,OAAO,EAAE,CAAC,QAAQ,EAAE;KAClD,CAAC;SACD,QAAQ,EAAE;IACb,IAAI,EAAE,GAAG,CAAC,MAAM,CAAC;QACf,aAAa,EAAE,GAAG,CAAC,KAAK,CAAC,WAAW,CAAC,GAAG,CAAC,MAAM,EAAE,CAAC,CAAC;KACpD,CAAC;CACH,CAAC,CAAA;AAEF,MAAM,CAAC,MAAM,uBAAuB,GAAG,YAAY,CAAA;AAEnD,MAAM,wBAAwB,GAAyB;IACrD,MAAM,EAAE,QAAQ;IAChB,MAAM,EAAE,sBAAsB;IAC9B,uBAAuB,EAAE,uCAAuC;IAChE,sBAAsB,EAAE,oBAAoB;CAC7C,CAAA;AAED,MAAM,aAAa,GAAG,kCAAkC,CAAC;IACvD,UAAU,EAAE,uBAAuB;IACnC,MAAM,EAAE,eAAe;IACvB,eAAe,EAAE,wBAAwB;CAC1C,CAAC,CAAA;AAEF,eAAe,aAAa,CAAA","sourcesContent":["import {validateUrl} from '../../app/validation/common.js'\nimport {TransformationConfig, createConfigExtensionSpecification} from '../specification.js'\nimport {normalizeDelimitedString} from '@shopify/cli-kit/common/string'\nimport {zod} from '@shopify/cli-kit/node/schema'\n\nconst AppAccessSchema = zod.object({\n  access: zod\n    .object({\n      admin: zod\n        .object({\n          direct_api_mode: zod.union([zod.literal('online'), zod.literal('offline')]).optional(),\n          embedded_app_direct_api_access: zod.boolean().optional(),\n        })\n        .optional(),\n    })\n    .optional(),\n  access_scopes: zod\n    .object({\n      scopes: zod\n        .string()\n        .transform((scopes) => normalizeDelimitedString(scopes) ?? '')\n        .optional(),\n      use_legacy_install_flow: zod.boolean().optional(),\n    })\n    .optional(),\n  auth: zod.object({\n    redirect_urls: zod.array(validateUrl(zod.string())),\n  }),\n})\n\nexport const AppAccessSpecIdentifier = 'app_access'\n\nconst AppAccessTransformConfig: TransformationConfig = {\n  access: 'access',\n  scopes: 'access_scopes.scopes',\n  use_legacy_install_flow: 'access_scopes.use_legacy_install_flow',\n  redirect_url_allowlist: 'auth.redirect_urls',\n}\n\nconst appAccessSpec = createConfigExtensionSpecification({\n  identifier: AppAccessSpecIdentifier,\n  schema: AppAccessSchema,\n  transformConfig: AppAccessTransformConfig,\n})\n\nexport default appAccessSpec\n"]}