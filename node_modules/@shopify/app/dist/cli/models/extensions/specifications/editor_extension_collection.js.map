{"version":3,"file":"editor_extension_collection.js","sourceRoot":"","sources":["../../../../../src/cli/models/extensions/specifications/editor_extension_collection.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,UAAU,EAAC,MAAM,eAAe,CAAA;AACxC,OAAO,EAAC,4BAA4B,EAAC,MAAM,qBAAqB,CAAA;AAChE,OAAO,EAAC,GAAG,EAAC,MAAM,8BAA8B,CAAA;AAMhD,MAAM,aAAa,GAAG,GAAG,CAAC,MAAM,CAAC;IAC/B,MAAM,EAAE,GAAG,CAAC,MAAM,EAAE;CACrB,CAAC,CAAA;AAEF,MAAM,CAAC,MAAM,+BAA+B,GAAG,UAAU,CAAC,MAAM,CAAC;IAC/D,OAAO,EAAE,GAAG,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC,QAAQ,EAAE;IAC5C,QAAQ,EAAE,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,MAAM,EAAE,CAAC,CAAC,QAAQ,EAAE;IAC5C,IAAI,EAAE,GAAG,CAAC,OAAO,CAAC,6BAA6B,CAAC;CACjD,CAAC,CAAA;AAEF,MAAM,sCAAsC,GAAG,4BAA4B,CAAC;IAC1E,UAAU,EAAE,6BAA6B;IACzC,MAAM,EAAE,+BAA+B;IACvC,iBAAiB,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE;IAC5B,YAAY,EAAE,KAAK,EAAE,MAAM,EAAE,CAAC,EAAE,EAAE;QAChC,MAAM,QAAQ,GACZ,MAAM,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE;YAC9B,OAAO,EAAC,MAAM,EAAC,CAAA;QACjB,CAAC,CAAC,IAAI,EAAE,CAAA;QACV,MAAM,OAAO,GAAG,MAAM,CAAC,OAAO,IAAI,EAAE,CAAA;QACpC,MAAM,YAAY,GAAG,CAAC,GAAG,QAAQ,EAAE,GAAG,OAAO,CAAC,CAAA;QAE9C,+CAA+C;QAC/C,0EAA0E;QAE1E,OAAO;YACL,IAAI,EAAE,MAAM,CAAC,IAAI;YACjB,MAAM,EAAE,MAAM,CAAC,MAAM;YACrB,aAAa,EAAE,YAAY;SAC5B,CAAA;IACH,CAAC;CACF,CAAC,CAAA;AAEF,eAAe,sCAAsC,CAAA","sourcesContent":["import {BaseSchema} from '../schemas.js'\nimport {createExtensionSpecification} from '../specification.js'\nimport {zod} from '@shopify/cli-kit/node/schema'\n\ninterface IncludeSchema {\n  handle: string\n}\n\nconst IncludeSchema = zod.object({\n  handle: zod.string(),\n})\n\nexport const EditorExtensionCollectionSchema = BaseSchema.extend({\n  include: zod.array(IncludeSchema).optional(),\n  includes: zod.array(zod.string()).optional(),\n  type: zod.literal('editor_extension_collection'),\n})\n\nconst editorExtensionCollectionSpecification = createExtensionSpecification({\n  identifier: 'editor_extension_collection',\n  schema: EditorExtensionCollectionSchema,\n  appModuleFeatures: (_) => [],\n  deployConfig: async (config, _) => {\n    const includes =\n      config.includes?.map((handle) => {\n        return {handle}\n      }) ?? []\n    const include = config.include ?? []\n    const inCollection = [...includes, ...include]\n\n    // eslint-disable-next-line no-warning-comments\n    // TODO: Validation to check either one of include or includes was defined\n\n    return {\n      name: config.name,\n      handle: config.handle,\n      in_collection: inCollection,\n    }\n  },\n})\n\nexport default editorExtensionCollectionSpecification\n"]}