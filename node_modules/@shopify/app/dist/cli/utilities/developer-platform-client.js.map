{"version":3,"file":"developer-platform-client.js","sourceRoot":"","sources":["../../../src/cli/utilities/developer-platform-client.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,cAAc,EAAC,MAAM,gDAAgD,CAAA;AAC7E,OAAO,EAAC,uBAAuB,EAAC,MAAM,0DAA0D,CAAA;AA8ChG,OAAO,EAAC,QAAQ,EAAC,MAAM,yCAAyC,CAAA;AAMhE,MAAM,UAAU,6BAA6B;IAC3C,IAAI,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,6BAA6B,CAAC,EAAE;QACvD,OAAO,IAAI,uBAAuB,EAAE,CAAA;KACrC;SAAM;QACL,OAAO,IAAI,cAAc,EAAE,CAAA;KAC5B;AACH,CAAC","sourcesContent":["import {PartnersClient} from './developer-platform-client/partners-client.js'\nimport {ShopifyDevelopersClient} from './developer-platform-client/shopify-developers-client.js'\nimport {PartnersSession} from '../../cli/services/context/partner-account-info.js'\nimport {\n  MinimalAppIdentifiers,\n  MinimalOrganizationApp,\n  Organization,\n  OrganizationApp,\n  OrganizationStore,\n} from '../models/organization.js'\nimport {AllAppExtensionRegistrationsQuerySchema} from '../api/graphql/all_app_extension_registrations.js'\nimport {ExtensionUpdateDraftInput, ExtensionUpdateSchema} from '../api/graphql/update_draft.js'\nimport {AppDeploySchema, AppDeployVariables} from '../api/graphql/app_deploy.js'\nimport {\n  GenerateSignedUploadUrlSchema,\n  GenerateSignedUploadUrlVariables,\n} from '../api/graphql/generate_signed_upload_url.js'\nimport {ExtensionCreateSchema, ExtensionCreateVariables} from '../api/graphql/extension_create.js'\nimport {ConvertDevToTestStoreSchema, ConvertDevToTestStoreVariables} from '../api/graphql/convert_dev_to_test_store.js'\nimport {FindStoreByDomainSchema} from '../api/graphql/find_store_by_domain.js'\nimport {AppVersionsQuerySchema} from '../api/graphql/get_versions_list.js'\nimport {\n  DevelopmentStorePreviewUpdateInput,\n  DevelopmentStorePreviewUpdateSchema,\n} from '../api/graphql/development_preview.js'\nimport {FindAppPreviewModeSchema, FindAppPreviewModeVariables} from '../api/graphql/find_app_preview_mode.js'\nimport {AppReleaseSchema, AppReleaseVariables} from '../api/graphql/app_release.js'\nimport {AppVersionByTagSchema, AppVersionByTagVariables} from '../api/graphql/app_version_by_tag.js'\nimport {AppVersionsDiffSchema, AppVersionsDiffVariables} from '../api/graphql/app_versions_diff.js'\nimport {SendSampleWebhookSchema, SendSampleWebhookVariables} from '../services/webhook/request-sample.js'\nimport {PublicApiVersionsSchema} from '../services/webhook/request-api-versions.js'\nimport {WebhookTopicsSchema, WebhookTopicsVariables} from '../services/webhook/request-topics.js'\nimport {\n  MigrateFlowExtensionSchema,\n  MigrateFlowExtensionVariables,\n} from '../api/graphql/extension_migrate_flow_extension.js'\nimport {UpdateURLsSchema, UpdateURLsVariables} from '../api/graphql/update_urls.js'\nimport {CurrentAccountInfoSchema} from '../api/graphql/current_account_info.js'\nimport {ExtensionTemplate} from '../models/app/template.js'\nimport {TargetSchemaDefinitionQueryVariables} from '../api/graphql/functions/target_schema_definition.js'\nimport {ApiSchemaDefinitionQueryVariables} from '../api/graphql/functions/api_schema_definition.js'\nimport {\n  MigrateToUiExtensionSchema,\n  MigrateToUiExtensionVariables,\n} from '../api/graphql/extension_migrate_to_ui_extension.js'\nimport {RemoteSpecification} from '../api/graphql/extension_specifications.js'\nimport {FunctionUploadUrlGenerateResponse} from '@shopify/cli-kit/node/api/partners'\nimport {isTruthy} from '@shopify/cli-kit/node/context/utilities'\n\nexport type Paginateable<T> = T & {\n  hasMorePages: boolean\n}\n\nexport function selectDeveloperPlatformClient(): DeveloperPlatformClient {\n  if (isTruthy(process.env.USE_SHOPIFY_DEVELOPERS_CLIENT)) {\n    return new ShopifyDevelopersClient()\n  } else {\n    return new PartnersClient()\n  }\n}\n\nexport interface CreateAppOptions {\n  isLaunchable?: boolean\n  scopesArray?: string[]\n  directory?: string\n}\n\ninterface AppModuleVersionSpecification {\n  identifier: string\n  name: string\n  experience: 'extension' | 'configuration' | 'deprecated'\n  options: {\n    managementExperience: 'cli' | 'custom' | 'dashboard'\n  }\n}\n\nexport interface AppModuleVersion {\n  registrationId: string\n  registrationUuid?: string\n  registrationUid?: string\n  registrationTitle: string\n  config?: object\n  type: string\n  specification?: AppModuleVersionSpecification\n}\n\nexport interface ActiveAppVersion {\n  appModuleVersions: AppModuleVersion[]\n}\n\nexport interface DeveloperPlatformClient {\n  supportsAtomicDeployments: boolean\n  requiresOrganization: boolean\n  session: () => Promise<PartnersSession>\n  refreshToken: () => Promise<string>\n  accountInfo: () => Promise<PartnersSession['accountInfo']>\n  appFromId: (app: MinimalAppIdentifiers) => Promise<OrganizationApp | undefined>\n  organizations: () => Promise<Organization[]>\n  orgFromId: (orgId: string) => Promise<Organization | undefined>\n  orgAndApps: (orgId: string) => Promise<Paginateable<{organization: Organization; apps: MinimalOrganizationApp[]}>>\n  appsForOrg: (orgId: string, term?: string) => Promise<Paginateable<{apps: MinimalOrganizationApp[]}>>\n  specifications: (appId: string) => Promise<RemoteSpecification[]>\n  templateSpecifications: (appId: string) => Promise<ExtensionTemplate[]>\n  createApp: (org: Organization, name: string, options?: CreateAppOptions) => Promise<OrganizationApp>\n  devStoresForOrg: (orgId: string) => Promise<OrganizationStore[]>\n  storeByDomain: (orgId: string, shopDomain: string) => Promise<FindStoreByDomainSchema>\n  appExtensionRegistrations: (app: MinimalAppIdentifiers) => Promise<AllAppExtensionRegistrationsQuerySchema>\n  appVersions: (appId: string) => Promise<AppVersionsQuerySchema>\n  activeAppVersion: (app: MinimalAppIdentifiers) => Promise<ActiveAppVersion>\n  appVersionByTag: (input: AppVersionByTagVariables) => Promise<AppVersionByTagSchema>\n  appVersionsDiff: (input: AppVersionsDiffVariables) => Promise<AppVersionsDiffSchema>\n  functionUploadUrl: () => Promise<FunctionUploadUrlGenerateResponse>\n  generateSignedUploadUrl: (input: GenerateSignedUploadUrlVariables) => Promise<GenerateSignedUploadUrlSchema>\n  createExtension: (input: ExtensionCreateVariables) => Promise<ExtensionCreateSchema>\n  updateExtension: (input: ExtensionUpdateDraftInput) => Promise<ExtensionUpdateSchema>\n  deploy: (input: AppDeployVariables) => Promise<AppDeploySchema>\n  release: (input: AppReleaseVariables) => Promise<AppReleaseSchema>\n  convertToTestStore: (input: ConvertDevToTestStoreVariables) => Promise<ConvertDevToTestStoreSchema>\n  updateDeveloperPreview: (input: DevelopmentStorePreviewUpdateInput) => Promise<DevelopmentStorePreviewUpdateSchema>\n  appPreviewMode: (input: FindAppPreviewModeVariables) => Promise<FindAppPreviewModeSchema>\n  sendSampleWebhook: (input: SendSampleWebhookVariables) => Promise<SendSampleWebhookSchema>\n  apiVersions: () => Promise<PublicApiVersionsSchema>\n  topics: (input: WebhookTopicsVariables) => Promise<WebhookTopicsSchema>\n  migrateFlowExtension: (input: MigrateFlowExtensionVariables) => Promise<MigrateFlowExtensionSchema>\n  updateURLs: (input: UpdateURLsVariables) => Promise<UpdateURLsSchema>\n  currentAccountInfo: () => Promise<CurrentAccountInfoSchema>\n  targetSchemaDefinition: (input: TargetSchemaDefinitionQueryVariables) => Promise<string | null>\n  apiSchemaDefinition: (input: ApiSchemaDefinitionQueryVariables) => Promise<string | null>\n  migrateToUiExtension: (input: MigrateToUiExtensionVariables) => Promise<MigrateToUiExtensionSchema>\n  toExtensionGraphQLType: (input: string) => string\n}\n"]}