import { ActiveAppVersion, DeveloperPlatformClient, Paginateable } from '../developer-platform-client.js';
import { PartnersSession } from '../../../cli/services/context/partner-account-info.js';
import { MinimalAppIdentifiers, MinimalOrganizationApp, Organization, OrganizationApp, OrganizationStore } from '../../models/organization.js';
import { AllAppExtensionRegistrationsQuerySchema } from '../../api/graphql/all_app_extension_registrations.js';
import { ExtensionUpdateDraftInput, ExtensionUpdateSchema } from '../../api/graphql/update_draft.js';
import { AppDeploySchema, AppDeployVariables } from '../../api/graphql/app_deploy.js';
import { GenerateSignedUploadUrlSchema, GenerateSignedUploadUrlVariables } from '../../api/graphql/generate_signed_upload_url.js';
import { ExtensionCreateSchema, ExtensionCreateVariables } from '../../api/graphql/extension_create.js';
import { ConvertDevToTestStoreSchema, ConvertDevToTestStoreVariables } from '../../api/graphql/convert_dev_to_test_store.js';
import { FindStoreByDomainSchema } from '../../api/graphql/find_store_by_domain.js';
import { AppVersionsQuerySchema } from '../../api/graphql/get_versions_list.js';
import { DevelopmentStorePreviewUpdateInput, DevelopmentStorePreviewUpdateSchema } from '../../api/graphql/development_preview.js';
import { FindAppPreviewModeSchema, FindAppPreviewModeVariables } from '../../api/graphql/find_app_preview_mode.js';
import { AppVersionsDiffSchema, AppVersionsDiffVariables } from '../../api/graphql/app_versions_diff.js';
import { AppReleaseSchema, AppReleaseVariables } from '../../api/graphql/app_release.js';
import { AppVersionByTagSchema, AppVersionByTagVariables } from '../../api/graphql/app_version_by_tag.js';
import { SendSampleWebhookSchema, SendSampleWebhookVariables } from '../../services/webhook/request-sample.js';
import { PublicApiVersionsSchema } from '../../services/webhook/request-api-versions.js';
import { WebhookTopicsSchema, WebhookTopicsVariables } from '../../services/webhook/request-topics.js';
import { MigrateFlowExtensionVariables, MigrateFlowExtensionSchema } from '../../api/graphql/extension_migrate_flow_extension.js';
import { UpdateURLsVariables, UpdateURLsSchema } from '../../api/graphql/update_urls.js';
import { CurrentAccountInfoSchema } from '../../api/graphql/current_account_info.js';
import { ExtensionTemplate } from '../../models/app/template.js';
import { TargetSchemaDefinitionQueryVariables } from '../../api/graphql/functions/target_schema_definition.js';
import { ApiSchemaDefinitionQueryVariables } from '../../api/graphql/functions/api_schema_definition.js';
import { MigrateToUiExtensionVariables, MigrateToUiExtensionSchema } from '../../api/graphql/extension_migrate_to_ui_extension.js';
import { RemoteSpecification } from '../../api/graphql/extension_specifications.js';
import { FunctionUploadUrlGenerateResponse } from '@shopify/cli-kit/node/api/partners';
import { GraphQLVariables } from '@shopify/cli-kit/node/api/graphql';
export declare class PartnersClient implements DeveloperPlatformClient {
    supportsAtomicDeployments: boolean;
    requiresOrganization: boolean;
    private _session;
    constructor(session?: PartnersSession);
    session(): Promise<PartnersSession>;
    request<T>(query: string, variables?: GraphQLVariables | undefined): Promise<T>;
    token(): Promise<string>;
    refreshToken(): Promise<string>;
    accountInfo(): Promise<PartnersSession['accountInfo']>;
    appFromId({ apiKey }: MinimalAppIdentifiers): Promise<OrganizationApp | undefined>;
    organizations(): Promise<Organization[]>;
    orgFromId(orgId: string): Promise<Organization | undefined>;
    orgAndApps(orgId: string): Promise<Paginateable<{
        organization: Organization;
        apps: MinimalOrganizationApp[];
    }>>;
    appsForOrg(organizationId: string, term?: string): Promise<Paginateable<{
        apps: MinimalOrganizationApp[];
    }>>;
    specifications(appId: string): Promise<RemoteSpecification[]>;
    templateSpecifications(appId: string): Promise<ExtensionTemplate[]>;
    createApp(org: Organization, name: string, options?: {
        isLaunchable?: boolean;
        scopesArray?: string[];
        directory?: string;
    }): Promise<OrganizationApp>;
    devStoresForOrg(orgId: string): Promise<OrganizationStore[]>;
    appExtensionRegistrations({ apiKey }: MinimalAppIdentifiers): Promise<AllAppExtensionRegistrationsQuerySchema>;
    appVersions(apiKey: string): Promise<AppVersionsQuerySchema>;
    appVersionByTag(input: AppVersionByTagVariables): Promise<AppVersionByTagSchema>;
    appVersionsDiff(input: AppVersionsDiffVariables): Promise<AppVersionsDiffSchema>;
    activeAppVersion({ apiKey }: MinimalAppIdentifiers): Promise<ActiveAppVersion>;
    functionUploadUrl(): Promise<FunctionUploadUrlGenerateResponse>;
    createExtension(input: ExtensionCreateVariables): Promise<ExtensionCreateSchema>;
    updateExtension(extensionInput: ExtensionUpdateDraftInput): Promise<ExtensionUpdateSchema>;
    deploy(deployInput: AppDeployVariables): Promise<AppDeploySchema>;
    release(input: AppReleaseVariables): Promise<AppReleaseSchema>;
    generateSignedUploadUrl(input: GenerateSignedUploadUrlVariables): Promise<GenerateSignedUploadUrlSchema>;
    convertToTestStore(input: ConvertDevToTestStoreVariables): Promise<ConvertDevToTestStoreSchema>;
    storeByDomain(orgId: string, shopDomain: string): Promise<FindStoreByDomainSchema>;
    updateDeveloperPreview(input: DevelopmentStorePreviewUpdateInput): Promise<DevelopmentStorePreviewUpdateSchema>;
    appPreviewMode(input: FindAppPreviewModeVariables): Promise<FindAppPreviewModeSchema>;
    sendSampleWebhook(input: SendSampleWebhookVariables): Promise<SendSampleWebhookSchema>;
    apiVersions(): Promise<PublicApiVersionsSchema>;
    topics(input: WebhookTopicsVariables): Promise<WebhookTopicsSchema>;
    migrateFlowExtension(input: MigrateFlowExtensionVariables): Promise<MigrateFlowExtensionSchema>;
    updateURLs(input: UpdateURLsVariables): Promise<UpdateURLsSchema>;
    currentAccountInfo(): Promise<CurrentAccountInfoSchema>;
    targetSchemaDefinition(input: TargetSchemaDefinitionQueryVariables): Promise<string | null>;
    apiSchemaDefinition(input: ApiSchemaDefinitionQueryVariables): Promise<string | null>;
    migrateToUiExtension(input: MigrateToUiExtensionVariables): Promise<MigrateToUiExtensionSchema>;
    toExtensionGraphQLType(input: string): string;
}
