import { CreateAppMutation, } from './shopify-developers-client/graphql/create-app.js';
import { ActiveAppReleaseQuery, } from './shopify-developers-client/graphql/active-app-release.js';
// import {SpecificationsQuery, SpecificationsQueryVariables, SpecificationsQuerySchema} from './shopify-developers-client/graphql/specifications.js'
import { CreateAppVersionMutation, } from './shopify-developers-client/graphql/create-app-version.js';
import { ReleaseVersionMutation, } from './shopify-developers-client/graphql/release-version.js';
import { filterDisabledFlags } from '../../../cli/services/dev/fetch.js';
import { isUnitTest } from '@shopify/cli-kit/node/context/local';
import { AbortError, BugError } from '@shopify/cli-kit/node/error';
import { orgScopedShopifyDevelopersRequest } from '@shopify/cli-kit/node/api/shopify-developers';
import { underscore } from '@shopify/cli-kit/common/string';
const ORG1 = {
    id: '1',
    businessName: 'Test Org',
};
export class ShopifyDevelopersClient {
    constructor(session) {
        this.requiresOrganization = true;
        this.supportsAtomicDeployments = true;
        this._session = session;
    }
    async session() {
        if (!this._session) {
            if (isUnitTest()) {
                throw new Error('ShopifyDevelopersClient.session() should not be invoked dynamically in a unit test');
            }
            // Need to replace with actual auth
            this._session = {
                token: 'token',
                accountInfo: {
                    type: 'UserAccount',
                    email: 'mail@example.com',
                },
            };
        }
        return this._session;
    }
    async token() {
        return (await this.session()).token;
    }
    async refreshToken() {
        return this.token();
    }
    async accountInfo() {
        return (await this.session()).accountInfo;
    }
    async appFromId(appIdentifiers) {
        const { app } = await this.fetchApp(appIdentifiers);
        const { modules } = app.activeRelease.version;
        const brandingModule = modules.find((mod) => mod.specification.identifier === 'branding');
        const appAccessModule = modules.find((mod) => mod.specification.identifier === 'app_access');
        return {
            id: app.id,
            title: brandingModule.config.name,
            apiKey: app.id,
            organizationId: appIdentifiers.organizationId,
            apiSecretKeys: [],
            grantedScopes: appAccessModule.config.scopes,
            flags: [],
        };
    }
    async organizations() {
        return [ORG1];
    }
    async orgFromId(orgId) {
        if (orgId === '1')
            return ORG1;
        throw new BugError(`Can't fetch organization with id ${orgId}`);
    }
    async orgAndApps(orgId) {
        if (orgId === '1') {
            return {
                organization: ORG1,
                apps: [],
                hasMorePages: false,
            };
        }
        else {
            throw new BugError(`Can't fetch organization with id ${orgId}`);
        }
    }
    async appsForOrg(_organizationId, _term) {
        return {
            apps: [],
            hasMorePages: false,
        };
    }
    async specifications(_appId) {
        return stubbedExtensionSpecifications();
        // // This should be the actual query, but it's not working at the moment...
        // const query = SpecificationsQuery
        // const variables: SpecificationsQueryVariables = {appId}
        // const result = await orgScopedShopifyDevelopersRequest<SpecificationsQuerySchema>(ORG1.id, query, await this.token(), variables)
        // console.log(JSON.stringify(result, null, 2))
        // return result.specifications.map((spec): ExtensionSpecification => ({
        // externalName: spec.name,
        // additionalIdentifiers: [],
        // partnersWebIdentifier: spec.identifier,
        // surface: '',
        // registrationLimit: 1,
        // appModuleFeatures: (_config) => [],
        // ...spec,
        // experience: spec.experience.toLowerCase() as 'extension' | 'configuration',
        // }))
    }
    async templateSpecifications(_appId) {
        throw new BugError('Not implemented: templateSpecifications');
    }
    async createApp(org, name, options) {
        const variables = createAppVars(name, options?.isLaunchable, options?.scopesArray);
        const mutation = CreateAppMutation;
        const result = await orgScopedShopifyDevelopersRequest(org.id, mutation, await this.token(), variables);
        if (result.appCreate.userErrors?.length > 0) {
            const errors = result.appCreate.userErrors.map((error) => error.message).join(', ');
            throw new AbortError(errors);
        }
        // Need to figure this out still
        const flags = filterDisabledFlags([]);
        const createdApp = result.appCreate.app;
        return {
            ...createdApp,
            title: name,
            apiKey: createdApp.id,
            apiSecretKeys: [],
            grantedScopes: options?.scopesArray ?? [],
            organizationId: org.id,
            newApp: true,
            flags,
        };
    }
    async devStoresForOrg(_orgId) {
        return [];
    }
    async appExtensionRegistrations(appIdentifiers) {
        const { app } = await this.fetchApp(appIdentifiers);
        const { modules } = app.activeRelease.version;
        return {
            app: {
                extensionRegistrations: [],
                dashboardManagedExtensionRegistrations: [],
                configurationRegistrations: modules
                    .filter((mod) => mod.specification.experience === 'CONFIGURATION')
                    .map((mod) => ({
                    id: mod.uid,
                    uuid: mod.uid,
                    title: mod.specification.name,
                    type: mod.specification.identifier,
                })),
            },
        };
    }
    async appVersions(_appId) {
        throw new BugError('Not implemented: appVersions');
    }
    async appVersionByTag(_input) {
        throw new BugError('Not implemented: appVersions');
    }
    async appVersionsDiff(_input) {
        throw new BugError('Not implemented: appVersions');
    }
    async activeAppVersion({ id, organizationId }) {
        const query = ActiveAppReleaseQuery;
        const variables = { appId: id };
        const result = await orgScopedShopifyDevelopersRequest(organizationId, query, await this.token(), variables);
        return {
            appModuleVersions: result.app.activeRelease.version.modules.map((mod) => {
                return {
                    registrationId: mod.gid,
                    registrationUid: mod.uid,
                    registrationTitle: mod.handle,
                    type: mod.specification.identifier,
                    config: mod.config,
                    specification: {
                        ...mod.specification,
                        options: { managementExperience: 'cli' },
                        experience: mod.specification.experience.toLowerCase(),
                    },
                };
            }),
            ...result.app.activeRelease,
        };
    }
    async functionUploadUrl() {
        throw new BugError('Not implemented: functionUploadUrl');
    }
    async generateSignedUploadUrl(_input) {
        throw new BugError('Not implemented: generateSignedUploadUrl');
    }
    async updateExtension(_input) {
        throw new BugError('Not implemented: updateExtension');
    }
    async deploy({ apiKey, appModules, versionTag }) {
        const variables = {
            appId: apiKey,
            appModules: (appModules ?? []).map((mod) => {
                return {
                    uid: mod.uuid ?? mod.handle,
                    specificationIdentifier: mod.specificationIdentifier ?? underscore(mod.handle),
                    handle: mod.handle,
                    config: mod.config,
                };
            }),
            versionTag,
        };
        const result = await orgScopedShopifyDevelopersRequest('1', CreateAppVersionMutation, await this.token(), variables);
        const { version, userErrors } = result.versionCreate;
        if (!version)
            return { appDeploy: { userErrors } };
        const versionResult = {
            appDeploy: {
                appVersion: {
                    uuid: version.id,
                    // Need to deal with ID properly as it's expected to be a number... how do we use it?
                    id: parseInt(version.id, 10),
                    versionTag: version.versionTag,
                    location: 'location',
                    appModuleVersions: version.modules.map((mod) => {
                        return {
                            uuid: mod.uid,
                            registrationUuid: mod.uid,
                            validationErrors: [],
                        };
                    }),
                    message: '',
                },
                userErrors: userErrors?.map((err) => ({ ...err, category: 'deploy', details: [] })),
            },
        };
        const releaseVariables = { appId: apiKey, versionId: version.id };
        const releaseResult = await orgScopedShopifyDevelopersRequest('1', ReleaseVersionMutation, await this.token(), releaseVariables);
        if (releaseResult.versionRelease?.userErrors) {
            versionResult.appDeploy.userErrors = (versionResult.appDeploy.userErrors ?? []).concat(releaseResult.versionRelease.userErrors.map((err) => ({ ...err, category: 'release', details: [] })));
        }
        return versionResult;
    }
    async release(_input) {
        throw new BugError('Not implemented: release');
    }
    async storeByDomain(_orgId, _shopDomain) {
        throw new BugError('Not implemented: storeByDomain');
    }
    async createExtension(_input) {
        throw new BugError('Not implemented: createExtension');
    }
    async convertToTestStore(_input) {
        throw new BugError('Not implemented: convertToTestStore');
    }
    async updateDeveloperPreview(_input) {
        throw new BugError('Not implemented: updateDeveloperPreview');
    }
    async appPreviewMode(_input) {
        throw new BugError('Not implemented: appPreviewMode');
    }
    async sendSampleWebhook(_input) {
        throw new BugError('Not implemented: sendSampleWebhook');
    }
    async apiVersions() {
        throw new BugError('Not implemented: apiVersions');
    }
    async topics(_input) {
        throw new BugError('Not implemented: topics');
    }
    async migrateFlowExtension(_input) {
        throw new BugError('Not implemented: migrateFlowExtension');
    }
    async updateURLs(_input) {
        throw new BugError('Not implemented: updateURLs');
    }
    async currentAccountInfo() {
        throw new BugError('Not implemented: currentAccountInfo');
    }
    async targetSchemaDefinition(_input) {
        throw new BugError('Not implemented: targetSchemaDefinition');
    }
    async apiSchemaDefinition(input) {
        throw new BugError('Not implemented: apiSchemaDefinition');
    }
    async migrateToUiExtension(input) {
        throw new BugError('Not implemented: migrateToUiExtension');
    }
    toExtensionGraphQLType(input) {
        return input.toLowerCase();
    }
    async fetchApp({ id, organizationId }) {
        const query = ActiveAppReleaseQuery;
        const variables = { appId: id };
        return orgScopedShopifyDevelopersRequest(organizationId, query, await this.token(), variables);
    }
}
// this is a temporary solution for editions to support https://vault.shopify.io/gsd/projects/31406
// read more here: https://vault.shopify.io/gsd/projects/31406
const MAGIC_URL = 'https://shopify.dev/apps/default-app-home';
const MAGIC_REDIRECT_URL = 'https://shopify.dev/apps/default-app-home/api/auth';
function createAppVars(name, isLaunchable = true, scopesArray) {
    return {
        appModules: [
            {
                uid: 'app_home',
                specificationIdentifier: 'app_home',
                config: JSON.stringify({
                    app_url: isLaunchable ? 'https://example.com' : MAGIC_URL,
                    embedded: isLaunchable,
                }),
            },
            {
                uid: 'branding',
                specificationIdentifier: 'branding',
                config: JSON.stringify({ name }),
            },
            {
                uid: 'webhooks',
                specificationIdentifier: 'webhooks',
                config: JSON.stringify({ api_version: '2024-01' }),
            },
            {
                uid: 'app_access',
                specificationIdentifier: 'app_access',
                config: JSON.stringify({
                    redirect_url_allowlist: isLaunchable ? ['https://example.com/api/auth'] : [MAGIC_REDIRECT_URL],
                    ...(scopesArray && { scopes: scopesArray.map((scope) => scope.trim()).join(',') }),
                }),
            },
        ],
    };
}
async function stubbedExtensionSpecifications() {
    return [
        {
            name: 'App access',
            externalName: 'App access',
            externalIdentifier: 'app_access',
            identifier: 'app_access',
            gated: false,
            experience: 'configuration',
            options: {
                managementExperience: 'cli',
                registrationLimit: 1,
            },
            features: {
                argo: undefined,
            },
        },
        {
            name: 'App Home',
            externalName: 'App Home',
            externalIdentifier: 'app_home',
            identifier: 'app_home',
            gated: false,
            experience: 'configuration',
            options: {
                managementExperience: 'cli',
                registrationLimit: 1,
            },
            features: {
                argo: undefined,
            },
        },
        {
            name: 'Branding',
            externalName: 'Branding',
            externalIdentifier: 'branding',
            identifier: 'branding',
            gated: false,
            experience: 'configuration',
            options: {
                managementExperience: 'cli',
                registrationLimit: 1,
            },
            features: {
                argo: undefined,
            },
        },
        {
            name: 'Webhooks',
            externalName: 'Webhooks',
            externalIdentifier: 'webhooks',
            identifier: 'webhooks',
            gated: false,
            experience: 'configuration',
            options: {
                managementExperience: 'cli',
                registrationLimit: 1,
            },
            features: {
                argo: undefined,
            },
        },
    ];
}
//# sourceMappingURL=shopify-developers-client.js.map