import { CreateAppQuery } from '../../api/graphql/create_app.js';
import { AllDevStoresByOrganizationQuery, } from '../../api/graphql/all_dev_stores_by_org.js';
import { fetchCurrentAccountInformation } from '../../../cli/services/context/partner-account-info.js';
import { fetchAppDetailsFromApiKey, fetchOrgAndApps, filterDisabledFlags } from '../../../cli/services/dev/fetch.js';
import { AllAppExtensionRegistrationsQuery, } from '../../api/graphql/all_app_extension_registrations.js';
import { ActiveAppVersionQuery, } from '../../api/graphql/app_active_version.js';
import { ExtensionUpdateDraftMutation, } from '../../api/graphql/update_draft.js';
import { AppDeploy } from '../../api/graphql/app_deploy.js';
import { GenerateSignedUploadUrl, } from '../../api/graphql/generate_signed_upload_url.js';
import { ExtensionCreateQuery, } from '../../api/graphql/extension_create.js';
import { ConvertDevToTestStoreQuery, } from '../../api/graphql/convert_dev_to_test_store.js';
import { FindStoreByDomainQuery, } from '../../api/graphql/find_store_by_domain.js';
import { AppVersionsQuery, } from '../../api/graphql/get_versions_list.js';
import { DevelopmentStorePreviewUpdateQuery, } from '../../api/graphql/development_preview.js';
import { FindAppPreviewModeQuery, } from '../../api/graphql/find_app_preview_mode.js';
import { AppVersionsDiffQuery, } from '../../api/graphql/app_versions_diff.js';
import { AppRelease } from '../../api/graphql/app_release.js';
import { AppVersionByTagQuery, } from '../../api/graphql/app_version_by_tag.js';
import { AllOrganizationsQuery } from '../../api/graphql/all_orgs.js';
import { sendSampleWebhookMutation, } from '../../services/webhook/request-sample.js';
import { GetApiVersionsQuery } from '../../services/webhook/request-api-versions.js';
import { getTopicsQuery } from '../../services/webhook/request-topics.js';
import { MigrateFlowExtensionMutation, } from '../../api/graphql/extension_migrate_flow_extension.js';
import { UpdateURLsQuery } from '../../api/graphql/update_urls.js';
import { CurrentAccountInfoQuery } from '../../api/graphql/current_account_info.js';
import { RemoteTemplateSpecificationsQuery, } from '../../api/graphql/template_specifications.js';
import { TargetSchemaDefinitionQuery, } from '../../api/graphql/functions/target_schema_definition.js';
import { ApiSchemaDefinitionQuery, } from '../../api/graphql/functions/api_schema_definition.js';
import { MigrateToUiExtensionQuery, } from '../../api/graphql/extension_migrate_to_ui_extension.js';
import { ExtensionSpecificationsQuery, } from '../../api/graphql/extension_specifications.js';
import { FindOrganizationBasicQuery, } from '../../api/graphql/find_org_basic.js';
import { isUnitTest } from '@shopify/cli-kit/node/context/local';
import { AbortError } from '@shopify/cli-kit/node/error';
import { FunctionUploadUrlGenerateMutation, partnersRequest, } from '@shopify/cli-kit/node/api/partners';
import { ensureAuthenticatedPartners } from '@shopify/cli-kit/node/session';
// this is a temporary solution for editions to support https://vault.shopify.io/gsd/projects/31406
// read more here: https://vault.shopify.io/gsd/projects/31406
const MAGIC_URL = 'https://shopify.dev/apps/default-app-home';
const MAGIC_REDIRECT_URL = 'https://shopify.dev/apps/default-app-home/api/auth';
function getAppVars(org, name, isLaunchable = true, scopesArray) {
    if (isLaunchable) {
        return {
            org: parseInt(org.id, 10),
            title: `${name}`,
            appUrl: 'https://example.com',
            redir: ['https://example.com/api/auth'],
            requestedAccessScopes: scopesArray ?? [],
            type: 'undecided',
        };
    }
    else {
        return {
            org: parseInt(org.id, 10),
            title: `${name}`,
            appUrl: MAGIC_URL,
            redir: [MAGIC_REDIRECT_URL],
            requestedAccessScopes: [],
            type: 'undecided',
        };
    }
}
export class PartnersClient {
    constructor(session) {
        this.supportsAtomicDeployments = false;
        this.requiresOrganization = false;
        this._session = session;
    }
    async session() {
        if (!this._session) {
            if (isUnitTest()) {
                throw new Error('PartnersClient.session() should not be invoked dynamically in a unit test');
            }
            const token = await ensureAuthenticatedPartners();
            this._session = {
                token,
                accountInfo: { type: 'UnknownAccount' },
            };
            const accountInfo = await fetchCurrentAccountInformation(this);
            this._session = { token, accountInfo };
        }
        return this._session;
    }
    async request(query, variables = undefined) {
        return partnersRequest(query, await this.token(), variables);
    }
    async token() {
        return (await this.session()).token;
    }
    async refreshToken() {
        const newToken = await ensureAuthenticatedPartners([], process.env, { noPrompt: true });
        const session = await this.session();
        if (newToken) {
            session.token = newToken;
        }
        return session.token;
    }
    async accountInfo() {
        return (await this.session()).accountInfo;
    }
    async appFromId({ apiKey }) {
        return fetchAppDetailsFromApiKey(apiKey, await this.token());
    }
    async organizations() {
        const result = await this.request(AllOrganizationsQuery);
        return result.organizations.nodes;
    }
    async orgFromId(orgId) {
        const variables = { id: orgId };
        const result = await this.request(FindOrganizationBasicQuery, variables);
        return result.organizations.nodes[0];
    }
    async orgAndApps(orgId) {
        const result = await fetchOrgAndApps(orgId, await this.session());
        return {
            organization: result.organization,
            apps: result.apps.nodes,
            hasMorePages: result.apps.pageInfo.hasNextPage,
        };
    }
    async appsForOrg(organizationId, term) {
        const result = await fetchOrgAndApps(organizationId, await this.session(), term);
        return {
            apps: result.apps.nodes,
            hasMorePages: result.apps.pageInfo.hasNextPage,
        };
    }
    async specifications(appId) {
        const variables = { api_key: appId };
        const result = await this.request(ExtensionSpecificationsQuery, variables);
        return result.extensionSpecifications;
    }
    async templateSpecifications(appId) {
        const variables = { apiKey: appId };
        const result = await this.request(RemoteTemplateSpecificationsQuery, variables);
        return result.templateSpecifications;
    }
    async createApp(org, name, options) {
        const variables = getAppVars(org, name, options?.isLaunchable, options?.scopesArray);
        const result = await this.request(CreateAppQuery, variables);
        if (result.appCreate.userErrors.length > 0) {
            const errors = result.appCreate.userErrors.map((error) => error.message).join(', ');
            throw new AbortError(errors);
        }
        const flags = filterDisabledFlags(result.appCreate.app.disabledFlags);
        return { ...result.appCreate.app, organizationId: org.id, newApp: true, flags };
    }
    async devStoresForOrg(orgId) {
        const variables = { id: orgId };
        const result = await this.request(AllDevStoresByOrganizationQuery, variables);
        return result.organizations.nodes[0].stores.nodes;
    }
    async appExtensionRegistrations({ apiKey }) {
        const variables = { apiKey };
        return this.request(AllAppExtensionRegistrationsQuery, variables);
    }
    async appVersions(apiKey) {
        const variables = { apiKey };
        return this.request(AppVersionsQuery, variables);
    }
    async appVersionByTag(input) {
        return this.request(AppVersionByTagQuery, input);
    }
    async appVersionsDiff(input) {
        return this.request(AppVersionsDiffQuery, input);
    }
    async activeAppVersion({ apiKey }) {
        const variables = { apiKey };
        const result = await this.request(ActiveAppVersionQuery, variables);
        const version = result.app.activeAppVersion;
        return {
            ...version,
            appModuleVersions: version.appModuleVersions.map((mod) => {
                return {
                    ...mod,
                    config: mod.config ? JSON.parse(mod.config) : {},
                };
            }),
        };
    }
    async functionUploadUrl() {
        return this.request(FunctionUploadUrlGenerateMutation);
    }
    async createExtension(input) {
        return this.request(ExtensionCreateQuery, input);
    }
    async updateExtension(extensionInput) {
        return this.request(ExtensionUpdateDraftMutation, extensionInput);
    }
    async deploy(deployInput) {
        return this.request(AppDeploy, deployInput);
    }
    async release(input) {
        return this.request(AppRelease, input);
    }
    async generateSignedUploadUrl(input) {
        return this.request(GenerateSignedUploadUrl, input);
    }
    async convertToTestStore(input) {
        return this.request(ConvertDevToTestStoreQuery, input);
    }
    async storeByDomain(orgId, shopDomain) {
        const variables = { orgId, shopDomain };
        return this.request(FindStoreByDomainQuery, variables);
    }
    async updateDeveloperPreview(input) {
        return this.request(DevelopmentStorePreviewUpdateQuery, input);
    }
    async appPreviewMode(input) {
        return this.request(FindAppPreviewModeQuery, input);
    }
    async sendSampleWebhook(input) {
        return this.request(sendSampleWebhookMutation, input);
    }
    async apiVersions() {
        return this.request(GetApiVersionsQuery);
    }
    async topics(input) {
        return this.request(getTopicsQuery, input);
    }
    async migrateFlowExtension(input) {
        return this.request(MigrateFlowExtensionMutation, input);
    }
    async updateURLs(input) {
        return this.request(UpdateURLsQuery, input);
    }
    async currentAccountInfo() {
        return this.request(CurrentAccountInfoQuery);
    }
    async targetSchemaDefinition(input) {
        const response = await this.request(TargetSchemaDefinitionQuery, input);
        return response.definition;
    }
    async apiSchemaDefinition(input) {
        const response = await this.request(ApiSchemaDefinitionQuery, input);
        return response.definition;
    }
    async migrateToUiExtension(input) {
        return this.request(MigrateToUiExtensionQuery, input);
    }
    toExtensionGraphQLType(input) {
        return input.toUpperCase();
    }
}
//# sourceMappingURL=partners-client.js.map