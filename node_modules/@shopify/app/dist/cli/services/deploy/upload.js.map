{"version":3,"file":"upload.js","sourceRoot":"","sources":["../../../../src/cli/services/deploy/upload.ts"],"names":[],"mappings":"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","sourcesContent":["import {themeExtensionConfig as generateThemeExtensionConfig} from './theme-extension-config.js'\nimport {Identifiers, IdentifiersExtensions} from '../../models/app/identifiers.js'\nimport {ExtensionUpdateDraftInput, ExtensionUpdateSchema} from '../../api/graphql/update_draft.js'\nimport {AppDeploySchema, AppDeployVariables, AppModuleSettings} from '../../api/graphql/app_deploy.js'\nimport {\n  GenerateSignedUploadUrlSchema,\n  GenerateSignedUploadUrlVariables,\n} from '../../api/graphql/generate_signed_upload_url.js'\nimport {ExtensionInstance} from '../../models/extensions/extension-instance.js'\nimport {DeveloperPlatformClient} from '../../utilities/developer-platform-client.js'\nimport {FunctionUploadUrlGenerateResponse} from '@shopify/cli-kit/node/api/partners'\nimport {readFile, readFileSync} from '@shopify/cli-kit/node/fs'\nimport {fetch, formData} from '@shopify/cli-kit/node/http'\nimport {AbortError, BugError} from '@shopify/cli-kit/node/error'\nimport {formatPackageManagerCommand, outputContent} from '@shopify/cli-kit/node/output'\nimport {AlertCustomSection, ListToken, TokenItem} from '@shopify/cli-kit/node/ui'\nimport {partition} from '@shopify/cli-kit/common/collection'\nimport {getPackageManager} from '@shopify/cli-kit/node/node-package-manager'\nimport {cwd} from '@shopify/cli-kit/node/path'\n\ninterface DeployThemeExtensionOptions {\n  /** The application API key */\n  apiKey: string\n\n  /** Set of local identifiers */\n  identifiers: Identifiers\n\n  /** The API client to send authenticated requests  */\n  developerPlatformClient: DeveloperPlatformClient\n}\n\n/**\n * Uploads theme extension(s)\n * @param options - The upload options\n */\nexport async function uploadThemeExtensions(\n  themeExtensions: ExtensionInstance[],\n  options: DeployThemeExtensionOptions,\n): Promise<void> {\n  const {apiKey, identifiers, developerPlatformClient} = options\n  await Promise.all(\n    themeExtensions.map(async (themeExtension) => {\n      const themeExtensionConfig = await generateThemeExtensionConfig(themeExtension)\n      const themeId = identifiers.extensionIds[themeExtension.localIdentifier]!\n      const themeExtensionInput: ExtensionUpdateDraftInput = {\n        apiKey,\n        config: JSON.stringify(themeExtensionConfig),\n        context: undefined,\n        registrationId: themeId,\n        handle: themeExtension.handle,\n      }\n      const result: ExtensionUpdateSchema = await developerPlatformClient.updateExtension(themeExtensionInput)\n      if (result.extensionUpdateDraft?.userErrors?.length > 0) {\n        const errors = result.extensionUpdateDraft.userErrors.map((error) => error.message).join(', ')\n        throw new AbortError(errors)\n      }\n    }),\n  )\n}\n\ninterface UploadExtensionsBundleOptions {\n  /** The application API key */\n  apiKey: string\n\n  /** The path to the bundle file to be uploaded */\n  bundlePath?: string\n\n  /** The API client to send authenticated requests  */\n  developerPlatformClient: DeveloperPlatformClient\n\n  /** App Modules extra data */\n  appModules: AppModuleSettings[]\n\n  /** The extensions' numeric identifiers (expressed as a string). */\n  extensionIds: IdentifiersExtensions\n\n  /** Wether or not to release the version */\n  release: boolean\n\n  /** App version message */\n  message?: string\n\n  /** App version identifier */\n  version?: string\n\n  /** The git reference url of the app version */\n  commitReference?: string\n}\n\nexport interface UploadExtensionValidationError {\n  uuid: string\n  errors: {\n    message: string\n    field: string[]\n  }[]\n}\n\nexport interface UploadExtensionsBundleOutput {\n  validationErrors: UploadExtensionValidationError[]\n  versionTag: string\n  message?: string\n  location: string\n  deployError?: string\n}\n\ntype ErrorSectionBody = TokenItem\ninterface ErrorCustomSection extends AlertCustomSection {\n  body: ErrorSectionBody\n}\n\n/**\n * Uploads a bundle.\n * @param options - The upload options\n */\nexport async function uploadExtensionsBundle(\n  options: UploadExtensionsBundleOptions,\n): Promise<UploadExtensionsBundleOutput> {\n  let signedURL\n  let deployError\n\n  if (options.bundlePath) {\n    signedURL = await getExtensionUploadURL(options.developerPlatformClient, options.apiKey)\n\n    const form = formData()\n    const buffer = readFileSync(options.bundlePath)\n    form.append('my_upload', buffer)\n    await fetch(signedURL, {\n      method: 'put',\n      body: buffer,\n      headers: form.getHeaders(),\n    })\n  }\n\n  const variables: AppDeployVariables = {\n    apiKey: options.apiKey,\n    skipPublish: !options.release,\n    message: options.message,\n    versionTag: options.version,\n    commitReference: options.commitReference,\n  }\n\n  if (signedURL) {\n    variables.bundleUrl = signedURL\n  }\n\n  if (options.appModules.length > 0) {\n    variables.appModules = options.appModules\n  }\n\n  const result: AppDeploySchema = await handlePartnersErrors(() => options.developerPlatformClient.deploy(variables))\n\n  if (result.appDeploy?.userErrors?.length > 0) {\n    const customSections: AlertCustomSection[] = deploymentErrorsToCustomSections(\n      result.appDeploy.userErrors,\n      options.extensionIds,\n      {\n        version: options.version,\n      },\n    )\n\n    if (result.appDeploy.appVersion) {\n      deployError = result.appDeploy.userErrors.map((error) => error.message).join(', ')\n    } else {\n      throw new AbortError({bold: \"Version couldn't be created.\"}, null, [], customSections)\n    }\n  }\n\n  const validationErrors = result.appDeploy.appVersion.appModuleVersions\n    .filter((ver) => ver.validationErrors.length > 0)\n    .map((ver) => {\n      return {uuid: ver.registrationUuid, errors: ver.validationErrors}\n    })\n\n  return {\n    validationErrors,\n    versionTag: result.appDeploy.appVersion.versionTag,\n    location: result.appDeploy.appVersion.location,\n    message: result.appDeploy.appVersion.message,\n    deployError,\n  }\n}\n\nconst VALIDATION_ERRORS_TITLE = '\\nValidation errors'\nconst GENERIC_ERRORS_TITLE = '\\n'\n\nexport function deploymentErrorsToCustomSections(\n  errors: AppDeploySchema['appDeploy']['userErrors'],\n  extensionIds: IdentifiersExtensions,\n  flags: {\n    version?: string\n  } = {},\n): ErrorCustomSection[] {\n  const isExtensionError = (error: (typeof errors)[0]) => {\n    return error.details?.some((detail) => detail.extension_id) ?? false\n  }\n\n  const isCliError = (error: (typeof errors)[0], extensionIds: IdentifiersExtensions) => {\n    const errorExtensionId =\n      error.details?.find((detail) => typeof detail.extension_id !== 'undefined')?.extension_id.toString() ?? ''\n\n    return Object.values(extensionIds).includes(errorExtensionId)\n  }\n\n  const [extensionErrors, nonExtensionErrors] = partition(errors, (error) => isExtensionError(error))\n\n  const [cliErrors, partnersErrors] = partition(extensionErrors, (error) => isCliError(error, extensionIds))\n\n  const customSections = [\n    ...generalErrorsSection(nonExtensionErrors, {version: flags.version}),\n    ...cliErrorsSections(cliErrors, extensionIds),\n    ...partnersErrorsSections(partnersErrors),\n  ]\n  return customSections\n}\n\nfunction generalErrorsSection(errors: AppDeploySchema['appDeploy']['userErrors'], flags: {version?: string} = {}) {\n  if (errors.length > 0) {\n    if (\n      errors.filter((error) => error.field.includes('version_tag') && error.message === 'has already been taken')\n        .length > 0 &&\n      flags.version\n    ) {\n      return [\n        {\n          body: [\n            'An app version with the name',\n            {userInput: flags.version},\n            'already exists. Deploy again with a different version name.',\n          ],\n        },\n      ]\n    }\n\n    if (errors.length === 1) {\n      return [\n        {\n          body: errors[0]!.message,\n        },\n      ]\n    }\n\n    return [\n      {\n        body: {\n          list: {\n            items: errors.map((error) => error.message),\n          },\n        },\n      },\n    ]\n  } else {\n    return []\n  }\n}\n\nfunction cliErrorsSections(errors: AppDeploySchema['appDeploy']['userErrors'], identifiers: IdentifiersExtensions) {\n  return errors.reduce((sections, error) => {\n    const field = error.field.join('.').replace('extension_points', 'extensions.targeting')\n    const errorMessage = field === 'base' ? error.message : `${field}: ${error.message}`\n\n    const remoteTitle = error.details.find((detail) => typeof detail.extension_title !== 'undefined')?.extension_title\n    const extensionIdentifier = error.details\n      .find((detail) => typeof detail.extension_id !== 'undefined')\n      ?.extension_id.toString()\n\n    const handle = Object.keys(identifiers).find((key) => identifiers[key] === extensionIdentifier)\n    const extensionName = handle ?? remoteTitle\n\n    const existingSection = sections.find((section) => section.title === extensionName)\n\n    if (existingSection) {\n      const sectionBody = existingSection.body as ListToken[]\n      const errorsList =\n        error.category === 'invalid'\n          ? sectionBody.find((listToken) => listToken.list.title === VALIDATION_ERRORS_TITLE)\n          : sectionBody.find((listToken) => listToken.list.title === GENERIC_ERRORS_TITLE)\n\n      if (errorsList) {\n        errorsList.list.items.push(errorMessage)\n      } else {\n        sectionBody.push({\n          list: {\n            title: error.category === 'invalid' ? VALIDATION_ERRORS_TITLE : GENERIC_ERRORS_TITLE,\n            items: [errorMessage],\n          },\n        })\n      }\n    } else {\n      sections.push({\n        title: extensionName,\n        body: [\n          {\n            list: {\n              title: error.category === 'invalid' ? VALIDATION_ERRORS_TITLE : GENERIC_ERRORS_TITLE,\n              items: [errorMessage],\n            },\n          },\n        ],\n      })\n    }\n\n    sections.forEach((section) => {\n      // eslint-disable-next-line id-length\n      ;(section.body as ListToken[]).sort((a, b) => {\n        if (a.list.title === VALIDATION_ERRORS_TITLE) {\n          return 1\n        }\n\n        if (b.list.title === VALIDATION_ERRORS_TITLE) {\n          return -1\n        }\n\n        return 0\n      })\n    })\n\n    return sections\n  }, [] as ErrorCustomSection[])\n}\n\nfunction partnersErrorsSections(errors: AppDeploySchema['appDeploy']['userErrors']) {\n  return errors\n    .reduce((sections, error) => {\n      const extensionIdentifier = error.details.find(\n        (detail) => typeof detail.extension_title !== 'undefined',\n      )?.extension_title\n\n      const existingSection = sections.find((section) => section.title === extensionIdentifier)\n\n      if (existingSection) {\n        existingSection.errorCount += 1\n      } else {\n        sections.push({\n          title: extensionIdentifier,\n          errorCount: 1,\n        })\n      }\n\n      return sections\n    }, [] as {title: string | undefined; errorCount: number}[])\n    .map((section) => ({\n      title: section.title,\n      body: `\\n${section.errorCount} error${\n        section.errorCount > 1 ? 's' : ''\n      } found in your extension. Fix these issues in the Partner Dashboard and try deploying again.`,\n    })) as ErrorCustomSection[]\n}\n\n/**\n * It generates a URL to upload an app bundle.\n * @param apiKey - The application API key\n */\nexport async function getExtensionUploadURL(developerPlatformClient: DeveloperPlatformClient, apiKey: string) {\n  const variables: GenerateSignedUploadUrlVariables = {\n    apiKey,\n    bundleFormat: 1,\n  }\n\n  const result: GenerateSignedUploadUrlSchema = await handlePartnersErrors(() =>\n    developerPlatformClient.generateSignedUploadUrl(variables),\n  )\n\n  if (result.appVersionGenerateSignedUploadUrl?.userErrors?.length > 0) {\n    const errors = result.appVersionGenerateSignedUploadUrl.userErrors.map((error) => error.message).join(', ')\n    throw new AbortError(errors)\n  }\n\n  return result.appVersionGenerateSignedUploadUrl.signedUploadUrl\n}\n\nexport async function uploadWasmBlob(\n  extensionIdentifier: string,\n  wasmPath: string,\n  developerPlatformClient: DeveloperPlatformClient,\n): Promise<{url: string; moduleId: string}> {\n  const {url, moduleId, headers, maxSize} = await getFunctionExtensionUploadUrlFromPartners(developerPlatformClient)\n  headers['Content-Type'] = 'application/wasm'\n\n  const functionContent = await readFile(wasmPath, {})\n  const res = await fetch(url, {body: functionContent, headers, method: 'PUT'})\n  const resBody = res.body?.read()?.toString() || ''\n\n  if (res.status === 200) {\n    return {url, moduleId}\n  } else if (res.status === 400 && resBody.includes('EntityTooLarge')) {\n    const errorMessage = outputContent`The size of the Wasm binary file for Function ${extensionIdentifier} is too large. It must be less than ${maxSize}.`\n    throw new AbortError(errorMessage)\n  } else if (res.status >= 400 && res.status < 500) {\n    const errorMessage = outputContent`Something went wrong uploading the Function ${extensionIdentifier}. The server responded with status ${res.status.toString()} and body: ${resBody}`\n    throw new BugError(errorMessage)\n  } else {\n    const errorMessage = outputContent`Something went wrong uploading the Function ${extensionIdentifier}. Try again.`\n    throw new AbortError(errorMessage)\n  }\n}\n\ninterface GetFunctionExtensionUploadURLOutput {\n  url: string\n  moduleId: string\n  maxSize: string\n  headers: {[key: string]: string}\n}\n\nasync function getFunctionExtensionUploadUrlFromPartners(\n  developerPlatformClient: DeveloperPlatformClient,\n): Promise<GetFunctionExtensionUploadURLOutput> {\n  const res: FunctionUploadUrlGenerateResponse = await handlePartnersErrors(() =>\n    developerPlatformClient.functionUploadUrl(),\n  )\n  return res.functionUploadUrlGenerate.generatedUrlDetails\n}\n\nasync function handlePartnersErrors<T>(request: () => Promise<T>): Promise<T> {\n  try {\n    const result = await request()\n    return result\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  } catch (error: any) {\n    if (error.errors?.[0]?.extensions?.type === 'unsupported_client_version') {\n      const packageManager = await getPackageManager(cwd())\n\n      throw new AbortError(['Upgrade your CLI version to run the', {command: 'deploy'}, 'command.'], null, [\n        ['Run', {command: formatPackageManagerCommand(packageManager, 'shopify upgrade')}],\n      ])\n    }\n\n    throw error\n  }\n}\n"]}