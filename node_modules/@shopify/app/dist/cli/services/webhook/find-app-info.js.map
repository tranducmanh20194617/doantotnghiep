{"version":3,"file":"find-app-info.js","sourceRoot":"","sources":["../../../../src/cli/services/webhook/find-app-info.ts"],"names":[],"mappings":"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","sourcesContent":["import {selectOrganizationPrompt, selectAppPrompt} from '../../prompts/dev.js'\nimport {fetchOrganizations, fetchOrgAndApps} from '../dev/fetch.js'\nimport {DeveloperPlatformClient} from '../../utilities/developer-platform-client.js'\nimport {MinimalAppIdentifiers} from '../../models/organization.js'\nimport {readAndParseDotEnv} from '@shopify/cli-kit/node/dot-env'\nimport {fileExists} from '@shopify/cli-kit/node/fs'\nimport {joinPath, basename, cwd} from '@shopify/cli-kit/node/path'\n\nexport interface AppCredentials {\n  clientSecret?: string\n  apiKey?: string\n  clientId?: string\n}\n\n/**\n * Grabs secret and api_key from .env file if existing\n *\n * @returns secret and api_key\n */\nexport async function findInEnv(): Promise<AppCredentials> {\n  const credentials: AppCredentials = {}\n\n  const envFile = joinPath(cwd(), '.env')\n  if (await fileExists(envFile)) {\n    const dotenv = await readAndParseDotEnv(envFile)\n\n    credentials.clientSecret = dotenv.variables.SHOPIFY_API_SECRET\n    credentials.apiKey = dotenv.variables.SHOPIFY_API_KEY\n  }\n\n  return credentials\n}\n\n/**\n * Find the app api_key, if available\n *\n * @param developerPlatformClient - The client to access the platform API\n * @returns appIdentifiers\n */\nexport async function findOrganizationApp(\n  developerPlatformClient: DeveloperPlatformClient,\n): Promise<Partial<MinimalAppIdentifiers> & {organizationId: MinimalAppIdentifiers['organizationId']}> {\n  const orgs = await fetchOrganizations(developerPlatformClient)\n  const org = await selectOrganizationPrompt(orgs)\n  const partnersSession = await developerPlatformClient.session()\n  const {apps} = await fetchOrgAndApps(org.id, partnersSession)\n\n  if (apps.nodes.length === 0) {\n    return {organizationId: org.id}\n  }\n\n  // Try to infer from current folder\n  const currentDir = basename(cwd())\n  const appFromDir = apps.nodes.find((elm) => elm.title === currentDir)\n  let apiKey\n  if (appFromDir === undefined) {\n    if (apps.nodes.length === 1 && apps.nodes[0]?.apiKey) {\n      apiKey = apps.nodes[0].apiKey\n    } else {\n      apiKey = await selectAppPrompt(apps.nodes, apps.pageInfo.hasNextPage, org.id)\n    }\n  } else {\n    apiKey = appFromDir.apiKey\n  }\n\n  return {id: apiKey, apiKey, organizationId: org.id}\n}\n\n/**\n * Find the app api_key, if available\n *\n * @param developerPlatformClient - The client to access the platform API\n * @param apiKey - app api_key\n * @returns client_id, client_secret, client_api_key\n */\nexport async function requestAppInfo(\n  {id, apiKey, organizationId}: MinimalAppIdentifiers,\n  developerPlatformClient: DeveloperPlatformClient,\n): Promise<AppCredentials> {\n  const fullSelectedApp = await developerPlatformClient.appFromId({id, apiKey, organizationId})\n  const credentials: AppCredentials = {}\n  if (fullSelectedApp === undefined) {\n    return credentials\n  }\n  credentials.apiKey = apiKey\n  credentials.clientId = fullSelectedApp.id\n\n  const entry = fullSelectedApp.apiSecretKeys.find((elm) => elm.secret)\n  if (entry) {\n    credentials.clientSecret = entry.secret\n  }\n\n  return credentials\n}\n"]}