{"version":3,"file":"prompts.js","sourceRoot":"","sources":["../../../../src/cli/services/context/prompts.ts"],"names":[],"mappings":"AAEA,OAAO,EAAC,wBAAwB,EAAE,wBAAwB,EAAE,UAAU,EAAC,MAAM,0BAA0B,CAAA;AAEvG,MAAM,CAAC,KAAK,UAAU,uBAAuB,CAC3C,KAAkB,EAClB,MAAoB,EACpB,OAAiC,WAAW;IAE5C,OAAO,wBAAwB,CAAC;QAC9B,OAAO,EAAE,SAAS,KAAK,CAAC,MAAM,sBAAsB,MAAM,CAAC,KAAK,mCAAmC,MAAM,CAAC,EAAE,IAAI;QAChH,mBAAmB,EAAE,0BAA0B,IAAI,EAAE;QACrD,mBAAmB,EAAE,uBAAuB,IAAI,EAAE;KACnD,CAAC,CAAA;AACJ,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,wBAAwB,CAC5C,WAAwB,EACxB,uBAAuC,EACvC,aAA4B;IAE5B,MAAM,aAAa,GAAG,uBAAuB,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;QAC7D,KAAK,EAAE,eAAe,MAAM,CAAC,KAAK,SAAS,MAAM,CAAC,EAAE,uBAAuB;QAC3E,KAAK,EAAE,MAAM,CAAC,aAAa,CAAC;KAC7B,CAAC,CAAC,CAAA;IACH,aAAa,CAAC,IAAI,CAAC,EAAC,KAAK,EAAE,sBAAsB,EAAE,KAAK,EAAE,QAAQ,EAAC,CAAC,CAAA;IACpE,MAAM,IAAI,GAAG,MAAM,wBAAwB,CAAC;QAC1C,OAAO,EAAE,sCAAsC,WAAW,CAAC,MAAM,IAAI;QACrE,OAAO,EAAE,aAAa;KACvB,CAAC,CAAA;IACF,OAAO,uBAAuB,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,aAAa,CAAC,KAAK,IAAI,CAAE,CAAA;AAClF,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,wBAAwB,CAC5C,SAA8B,EAC9B,iBAAiB,GAAG,IAAI;IAExB,MAAM,cAAc,GAAG,SAAS,CAAC,GAAG,CAAC,CAAC,EAAC,KAAK,EAAC,EAAE,EAAE,CAAC,IAAI,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;IACjF,MAAM,iBAAiB,GAAG,SAAS,CAAC,GAAG,CAAC,CAAC,EAAC,MAAM,EAAC,EAAE,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,iBAAiB,EAAE,CAAC,CAAA;IACtF,MAAM,oBAAoB,GAAG,iBAAiB;SAC3C,MAAM,CAAC,CAAC,IAAI,EAAE,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SAC1D,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,IAAI,GAAG,CAAC;SAC1B,IAAI,CAAC,IAAI,CAAC,CAAA;IAEb,UAAU,CAAC;QACT,QAAQ,EAAE,uCAAuC;QACjD,IAAI,EAAE,QAAQ,cAAc,iLAAiL;KAC9M,CAAC,CAAA;IAEF,MAAM,cAAc,GAAG,iBAAiB;QACtC,CAAC,CAAC,+BAA+B,oBAAoB,EAAE;QACvD,CAAC,CAAC,wBAAwB,CAAA;IAE5B,OAAO,wBAAwB,CAAC;QAC9B,OAAO,EAAE,WAAW,cAAc,GAAG;QACrC,mBAAmB,EAAE,cAAc;QACnC,mBAAmB,EAAE,YAAY;KAClC,CAAC,CAAA;AACJ,CAAC","sourcesContent":["import {LocalRemoteSource} from './id-matching.js'\nimport {LocalSource, RemoteSource} from './identifiers.js'\nimport {renderAutocompletePrompt, renderConfirmationPrompt, renderInfo} from '@shopify/cli-kit/node/ui'\n\nexport async function matchConfirmationPrompt(\n  local: LocalSource,\n  remote: RemoteSource,\n  type: 'extension' | 'function' = 'extension',\n) {\n  return renderConfirmationPrompt({\n    message: `Match ${local.handle} (local name) with ${remote.title} (name on Shopify Partners, ID: ${remote.id})?`,\n    confirmationMessage: `Yes, match to existing ${type}`,\n    cancellationMessage: `No, create as a new ${type}`,\n  })\n}\n\nexport async function selectRemoteSourcePrompt(\n  localSource: LocalSource,\n  remoteSourcesOfSameType: RemoteSource[],\n  remoteIdField: 'id' | 'uuid',\n): Promise<RemoteSource> {\n  const remoteOptions = remoteSourcesOfSameType.map((remote) => ({\n    label: `Match it to ${remote.title} (ID: ${remote.id} on Shopify Partners)`,\n    value: remote[remoteIdField],\n  }))\n  remoteOptions.push({label: 'Create new extension', value: 'create'})\n  const uuid = await renderAutocompletePrompt({\n    message: `How would you like to deploy your \"${localSource.handle}\"?`,\n    choices: remoteOptions,\n  })\n  return remoteSourcesOfSameType.find((remote) => remote[remoteIdField] === uuid)!\n}\n\nexport async function extensionMigrationPrompt(\n  toMigrate: LocalRemoteSource[],\n  includeRemoteType = true,\n): Promise<boolean> {\n  const migrationNames = toMigrate.map(({local}) => `\"${local.handle}\"`).join(', ')\n  const allMigrationTypes = toMigrate.map(({remote}) => remote.type.toLocaleLowerCase())\n  const uniqueMigrationTypes = allMigrationTypes\n    .filter((type, i) => allMigrationTypes.indexOf(type) === i)\n    .map((name) => `\"${name}\"`)\n    .join(', ')\n\n  renderInfo({\n    headline: \"Extension migrations can't be undone.\",\n    body: `Your ${migrationNames} configuration has been updated. Migrating gives you access to new features and won't impact the end user experience. All previous extension versions will reflect this change.`,\n  })\n\n  const confirmMessage = includeRemoteType\n    ? `Yes, confirm migration from ${uniqueMigrationTypes}`\n    : 'Yes, confirm migration'\n\n  return renderConfirmationPrompt({\n    message: `Migrate ${migrationNames}?`,\n    confirmationMessage: confirmMessage,\n    cancellationMessage: 'No, cancel',\n  })\n}\n"]}