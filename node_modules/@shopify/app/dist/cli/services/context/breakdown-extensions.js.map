{"version":3,"file":"breakdown-extensions.js","sourceRoot":"","sources":["../../../../src/cli/services/context/breakdown-extensions.ts"],"names":[],"mappings":"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","sourcesContent":["import {ensureExtensionsIds} from './identifiers-extensions.js'\nimport {EnsureDeploymentIdsPresenceOptions, LocalSource, RemoteSource} from './identifiers.js'\nimport {versionDiffByVersion} from '../release/version-diff.js'\nimport {AppVersionsDiffExtensionSchema} from '../../api/graphql/app_versions_diff.js'\nimport {AppInterface, CurrentAppConfiguration, filterNonVersionedAppFields} from '../../models/app/app.js'\nimport {MinimalOrganizationApp} from '../../models/organization.js'\nimport {buildDiffConfigContent} from '../../prompts/config.js'\nimport {IdentifiersExtensions} from '../../models/app/identifiers.js'\nimport {fetchAppRemoteConfiguration, remoteAppConfigurationExtensionContent} from '../app/select-app.js'\nimport {ActiveAppVersion, AppModuleVersion, DeveloperPlatformClient} from '../../utilities/developer-platform-client.js'\n\nexport interface ConfigExtensionIdentifiersBreakdown {\n  existingFieldNames: string[]\n  existingUpdatedFieldNames: string[]\n  newFieldNames: string[]\n  deletedFieldNames: string[]\n}\n\nexport interface ExtensionIdentifierBreakdownInfo {\n  title: string\n  experience: 'extension' | 'dashboard'\n}\n\nexport function buildExtensionBreakdownInfo(title: string): ExtensionIdentifierBreakdownInfo {\n  return {title, experience: 'extension'}\n}\n\nexport function buildDashboardBreakdownInfo(title: string): ExtensionIdentifierBreakdownInfo {\n  return {title, experience: 'dashboard'}\n}\n\nexport interface ExtensionIdentifiersBreakdown {\n  onlyRemote: ExtensionIdentifierBreakdownInfo[]\n  toCreate: ExtensionIdentifierBreakdownInfo[]\n  toUpdate: ExtensionIdentifierBreakdownInfo[]\n}\n\nexport async function extensionsIdentifiersDeployBreakdown(options: EnsureDeploymentIdsPresenceOptions) {\n  const remoteExtensionsRegistrations = await options.developerPlatformClient.appExtensionRegistrations({\n    id: options.appId,\n    apiKey: options.appId,\n    organizationId: '0',\n  })\n\n  const extensionsToConfirm = await ensureExtensionsIds(options, remoteExtensionsRegistrations.app)\n  let extensionIdentifiersBreakdown = loadLocalExtensionsIdentifiersBreakdown(extensionsToConfirm)\n  if (options.release) {\n    extensionIdentifiersBreakdown = await resolveRemoteExtensionIdentifiersBreakdown(\n      options.developerPlatformClient,\n      options.remoteApp,\n      extensionsToConfirm.validMatches,\n      extensionsToConfirm.extensionsToCreate,\n      extensionsToConfirm.dashboardOnlyExtensions,\n    )\n  }\n  return {\n    extensionIdentifiersBreakdown,\n    extensionsToConfirm,\n    remoteExtensionsRegistrations: remoteExtensionsRegistrations.app,\n  }\n}\n\nexport async function extensionsIdentifiersReleaseBreakdown(\n  developerPlatformClient: DeveloperPlatformClient,\n  apiKey: string,\n  version: string,\n) {\n  const {versionsDiff, versionDetails} = await versionDiffByVersion(apiKey, version, developerPlatformClient)\n\n  const mapIsExtension = (extensions: AppVersionsDiffExtensionSchema[]) =>\n    extensions\n      .filter((extension) => extension.specification.experience === 'extension')\n      .map((extension) => buildExtensionBreakdownInfo(extension.registrationTitle))\n  const mapIsDashboard = (extensions: AppVersionsDiffExtensionSchema[]) =>\n    extensions\n      .filter((extension) => extension.specification.options.managementExperience === 'dashboard')\n      .map((extension) => buildDashboardBreakdownInfo(extension.registrationTitle))\n\n  const extensionIdentifiersBreakdown = {\n    onlyRemote: [...mapIsExtension(versionsDiff.removed), ...mapIsDashboard(versionsDiff.removed)],\n    toCreate: [...mapIsExtension(versionsDiff.added), ...mapIsDashboard(versionsDiff.added)],\n    toUpdate: [...mapIsExtension(versionsDiff.updated), ...mapIsDashboard(versionsDiff.updated)],\n  }\n\n  return {extensionIdentifiersBreakdown, versionDetails}\n}\n\nexport async function configExtensionsIdentifiersBreakdown({\n  developerPlatformClient,\n  remoteApp,\n  localApp,\n  versionAppModules,\n  release,\n}: {\n  developerPlatformClient: DeveloperPlatformClient\n  apiKey: string\n  remoteApp: MinimalOrganizationApp\n  localApp: AppInterface\n  versionAppModules?: AppModuleVersion[]\n  release?: boolean\n}) {\n  if (localApp.allExtensions.filter((extension) => extension.isAppConfigExtension).length === 0) return\n  if (!release) return loadLocalConfigExtensionIdentifiersBreakdown(localApp)\n\n  return resolveRemoteConfigExtensionIdentifiersBreakdown(\n    developerPlatformClient,\n    remoteApp,\n    localApp,\n    versionAppModules,\n  )\n}\n\nfunction loadLocalConfigExtensionIdentifiersBreakdown(app: AppInterface): ConfigExtensionIdentifiersBreakdown {\n  return {\n    existingFieldNames: filterNonVersionedAppFields(app.configuration),\n    existingUpdatedFieldNames: [] as string[],\n    newFieldNames: [] as string[],\n    deletedFieldNames: [] as string[],\n  }\n}\n\nasync function resolveRemoteConfigExtensionIdentifiersBreakdown(\n  developerPlatformClient: DeveloperPlatformClient,\n  remoteApp: MinimalOrganizationApp,\n  app: AppInterface,\n  versionAppModules?: AppModuleVersion[],\n) {\n  const remoteConfig = await fetchAppRemoteConfiguration(\n    remoteApp,\n    developerPlatformClient,\n    app.specifications ?? [],\n    app.remoteFlags,\n  )\n  const baselineConfig = versionAppModules\n    ? remoteAppConfigurationExtensionContent(versionAppModules, app.specifications ?? [], app.remoteFlags)\n    : app.configuration\n  const diffConfigContent = buildDiffConfigContent(\n    baselineConfig as CurrentAppConfiguration,\n    remoteConfig,\n    app.configSchema,\n    false,\n  )\n\n  // List of field included in the config except the ones that only affect the CLI and are not pushed to the server\n  // (versioned fields)\n  const versionedLocalFieldNames = filterNonVersionedAppFields(baselineConfig)\n  // List of remote fields that have different values to the local ones or are not present in the local config\n  const remoteDiffModifications = diffConfigContent\n    ? getFieldsFromDiffConfigContent(diffConfigContent.baselineContent)\n    : []\n  // List of local fields that have different values to the remote ones or  are not present in the remote config\n  const localDiffModifications = diffConfigContent\n    ? getFieldsFromDiffConfigContent(diffConfigContent.updatedContent)\n    : []\n  // List of versioned field that exists locally and remotely and have the same value\n  const notModifiedVersionedLocalFieldNames = versionedLocalFieldNames.filter(\n    (field) => !remoteDiffModifications.includes(field) && !localDiffModifications.includes(field),\n  )\n  // List of versioned field that exists locally and remotely and have different values\n  const modifiedVersionedLocalFieldNames = versionedLocalFieldNames.filter(\n    (field) => remoteDiffModifications.includes(field) && localDiffModifications.includes(field),\n  )\n  // List of versioned field that exists locally but not remotely\n  const newVersionedLocalFieldNames = localDiffModifications.filter(\n    (field) => !remoteDiffModifications.includes(field) && versionedLocalFieldNames.includes(field),\n  )\n  // List of versioned field that exists remotely but not locally\n  // `handle` property won't be temporary shown in the list of removed properties\n  const deletedVersionedLocalFieldNames = remoteDiffModifications.filter(\n    (field) => !localDiffModifications.includes(field) && field !== 'handle',\n  )\n\n  return {\n    existingFieldNames: notModifiedVersionedLocalFieldNames,\n    existingUpdatedFieldNames: modifiedVersionedLocalFieldNames,\n    newFieldNames: newVersionedLocalFieldNames,\n    deletedFieldNames: deletedVersionedLocalFieldNames,\n  }\n}\n\n/**\n * This method extracts the list of global fields or global sections from the string that represents a toml section like\n * this:\n *        embedded = true\n *\n *        [access_scopes]\n *        scopes = \"read_products,write_products,write_discounts\"\n *\n *        [webhooks.privacy_compliance]\n *        customer_deletion_url = \"https://myhooks.dev/apps/customer_deletion_url_edited\"\n *\n * Each block is separated by a breaking line. The method will the extract\n * the `field`  following these patterns:\n * - <field> = <value> (in this case all the fields inside the block that matches the pattern will be returned)\n * - [<field>]\n * - [\\<field.subsection\\>]\n *\n * @param diffConfigContent - The toml string to parse\n * @returns The list of fields\n */\nfunction getFieldsFromDiffConfigContent(diffConfigContent: string): string[] {\n  const fields = diffConfigContent\n    // Split the input string into sections by one or more blank lines\n    .split(/\\n\\s*\\n/)\n    .flatMap((section) => {\n      // Split each section into lines\n      const lines = section.split('\\n')\n      if (lines.length === 0) return []\n      // Match the first line of the section against a regular expression to extract the first field name based on the\n      // described patterns\n      const firstLineMatch = lines[0]!.match(/^(?:\\[(\\w+)|(\\w+)\\s*=)/)\n      if (!firstLineMatch) return []\n      // Extract the first field name from the appropriate capture group\n      const firstFieldName = firstLineMatch[1] || firstLineMatch[2]\n      if (!firstFieldName) return []\n      // Return field if matches either the pattern [\\<field.subsection\\>] or [<field>]\n      if (firstFieldName.includes('.')) return [firstFieldName.split('.')[0]]\n      // If the first line of the section matches the pattern  <field> = <value> extract the following\n      // <field> = <value>  that match that condition until the section is finished\n      const otherFieldNames = firstLineMatch[2]\n        ? lines\n            .slice(1)\n            .map((line) => line.match(/^(\\w+)\\s*=/))\n            .filter(Boolean)\n            .map((match) => match![1])\n        : []\n      return [firstFieldName, ...otherFieldNames]\n    })\n    .filter((match): match is string => match !== undefined)\n\n  // Return the list of fields without duplicates\n  return Array.from(new Set(fields))\n}\n\nfunction loadLocalExtensionsIdentifiersBreakdown({\n  validMatches: localRegistration,\n  extensionsToCreate: localSourceToCreate,\n  dashboardOnlyExtensions,\n}: {\n  validMatches: IdentifiersExtensions\n  extensionsToCreate: LocalSource[]\n  dashboardOnlyExtensions: RemoteSource[]\n}): ExtensionIdentifiersBreakdown {\n  const identifiersToUpdate = Object.keys(localRegistration).map(buildExtensionBreakdownInfo)\n  const identifiersToCreate = localSourceToCreate.map((source) => buildExtensionBreakdownInfo(source.localIdentifier))\n  const dashboardToUpdate = dashboardOnlyExtensions\n    .filter((dashboard) => !Object.values(localRegistration).includes(dashboard.uuid))\n    .map((dashboard) => buildDashboardBreakdownInfo(dashboard.title))\n  return {\n    onlyRemote: [] as ExtensionIdentifierBreakdownInfo[],\n    toCreate: [] as ExtensionIdentifierBreakdownInfo[],\n    toUpdate: [...identifiersToUpdate, ...identifiersToCreate, ...dashboardToUpdate],\n  }\n}\n\nasync function resolveRemoteExtensionIdentifiersBreakdown(\n  developerPlatformClient: DeveloperPlatformClient,\n  remoteApp: MinimalOrganizationApp,\n  localRegistration: IdentifiersExtensions,\n  toCreate: LocalSource[],\n  dashboardOnly: RemoteSource[],\n): Promise<ExtensionIdentifiersBreakdown> {\n  const activeAppVersion = await developerPlatformClient.activeAppVersion(remoteApp)\n\n  const extensionIdentifiersBreakdown = loadExtensionsIdentifiersBreakdown(\n    activeAppVersion,\n    localRegistration,\n    toCreate,\n  )\n\n  const dashboardOnlyFinal = dashboardOnly.filter(\n    (dashboardOnly) =>\n      !Object.values(localRegistration).includes(dashboardOnly.uuid) &&\n      !toCreate.map((source) => source.localIdentifier).includes(dashboardOnly.uuid),\n  )\n  const dashboardIdentifiersBreakdown = loadDashboardIdentifiersBreakdown(dashboardOnlyFinal, activeAppVersion)\n\n  return {\n    onlyRemote: [...extensionIdentifiersBreakdown.onlyRemote, ...dashboardIdentifiersBreakdown.onlyRemote],\n    toCreate: [...extensionIdentifiersBreakdown.toCreate, ...dashboardIdentifiersBreakdown.toCreate],\n    toUpdate: [...extensionIdentifiersBreakdown.toUpdate, ...dashboardIdentifiersBreakdown.toUpdate],\n  }\n}\n\nfunction loadExtensionsIdentifiersBreakdown(\n  activeAppVersion: ActiveAppVersion,\n  localRegistration: IdentifiersExtensions,\n  toCreate: LocalSource[],\n) {\n  const extensionModules =\n    activeAppVersion?.appModuleVersions.filter(\n      (module) => !module.specification || module.specification.experience === 'extension',\n    ) || []\n\n  const extensionsToUpdate = Object.entries(localRegistration)\n    .filter(([_identifier, uuid]) => extensionModules.map((module) => module.registrationUuid!).includes(uuid))\n    .map(([identifier, _uuid]) => identifier)\n\n  let extensionsToCreate = Object.entries(localRegistration)\n    .filter(([_identifier, uuid]) => !extensionModules.map((module) => module.registrationUuid!).includes(uuid))\n    .map(([identifier, _uuid]) => identifier)\n  extensionsToCreate = Array.from(new Set(extensionsToCreate.concat(toCreate.map((source) => source.localIdentifier))))\n\n  const extensionsOnlyRemote = extensionModules\n    .filter(\n      (module) =>\n        !Object.values(localRegistration).includes(module.registrationUuid!) &&\n        !toCreate.map((source) => source.localIdentifier).includes(module.registrationUuid!),\n    )\n    .map((module) => module.registrationTitle)\n\n  return {\n    onlyRemote: extensionsOnlyRemote.map(buildExtensionBreakdownInfo),\n    toCreate: extensionsToCreate.map(buildExtensionBreakdownInfo),\n    toUpdate: extensionsToUpdate.map(buildExtensionBreakdownInfo),\n  }\n}\n\nfunction loadDashboardIdentifiersBreakdown(currentRegistrations: RemoteSource[], activeAppVersion: ActiveAppVersion) {\n  const currentVersions =\n    activeAppVersion?.appModuleVersions.filter(\n      (module) => module.specification!.options.managementExperience === 'dashboard',\n    ) || []\n\n  const versionsNotIncluded = (version: AppModuleVersion) =>\n    !currentRegistrations.map((registration) => registration.uuid).includes(version.registrationUuid!)\n  const onlyRemote = currentVersions\n    .filter(versionsNotIncluded)\n    .map((module) => buildDashboardBreakdownInfo(module.registrationTitle))\n\n  const registrationIncluded = (registration: RemoteSource) =>\n    currentVersions.map((version) => version.registrationUuid).includes(registration.uuid)\n  const registrationNotIncluded = (registration: RemoteSource) => !registrationIncluded(registration)\n  const toCreate = currentRegistrations\n    .filter(registrationNotIncluded)\n    .map((registration) => buildDashboardBreakdownInfo(registration.title))\n  const toUpdate = currentRegistrations\n    .filter(registrationIncluded)\n    .map((registration) => buildDashboardBreakdownInfo(registration.title))\n\n  return {\n    onlyRemote,\n    toCreate,\n    toUpdate,\n  }\n}\n"]}