{"version":3,"file":"identifiers-extensions.js","sourceRoot":"","sources":["../../../../src/cli/services/context/identifiers-extensions.ts"],"names":[],"mappings":"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","sourcesContent":["import {manualMatchIds} from './id-manual-matching.js'\nimport {automaticMatchmaking} from './id-matching.js'\nimport {EnsureDeploymentIdsPresenceOptions, LocalSource, RemoteSource} from './identifiers.js'\nimport {extensionMigrationPrompt, matchConfirmationPrompt} from './prompts.js'\nimport {createExtension} from '../dev/create-extension.js'\nimport {IdentifiersExtensions} from '../../models/app/identifiers.js'\nimport {getUIExtensionsToMigrate, migrateExtensionsToUIExtension} from '../dev/migrate-to-ui-extension.js'\nimport {getFlowExtensionsToMigrate, migrateFlowExtensions} from '../dev/migrate-flow-extension.js'\nimport {AppInterface} from '../../models/app/app.js'\nimport {DeveloperPlatformClient} from '../../utilities/developer-platform-client.js'\nimport {outputCompleted} from '@shopify/cli-kit/node/output'\nimport {AbortSilentError} from '@shopify/cli-kit/node/error'\n\ninterface AppWithExtensions {\n  extensionRegistrations: RemoteSource[]\n  dashboardManagedExtensionRegistrations: RemoteSource[]\n}\n\nexport async function ensureExtensionsIds(\n  options: EnsureDeploymentIdsPresenceOptions,\n  {\n    extensionRegistrations: initialRemoteExtensions,\n    dashboardManagedExtensionRegistrations: dashboardOnlyExtensions,\n  }: AppWithExtensions,\n) {\n  let remoteExtensions = initialRemoteExtensions\n  const validIdentifiers = options.envIdentifiers.extensions ?? {}\n  const localExtensions = options.app.allExtensions.filter((ext) => ext.isUuidManaged())\n\n  const uiExtensionsToMigrate = getUIExtensionsToMigrate(localExtensions, remoteExtensions, validIdentifiers)\n  const flowExtensionsToMigrate = getFlowExtensionsToMigrate(localExtensions, dashboardOnlyExtensions, validIdentifiers)\n\n  if (uiExtensionsToMigrate.length > 0) {\n    const confirmedMigration = await extensionMigrationPrompt(uiExtensionsToMigrate)\n    if (!confirmedMigration) throw new AbortSilentError()\n    remoteExtensions = await migrateExtensionsToUIExtension(\n      uiExtensionsToMigrate,\n      options.appId,\n      remoteExtensions,\n      options.developerPlatformClient,\n    )\n  }\n\n  if (flowExtensionsToMigrate.length > 0) {\n    const confirmedMigration = await extensionMigrationPrompt(flowExtensionsToMigrate, false)\n    if (!confirmedMigration) throw new AbortSilentError()\n    const newRemoteExtensions = await migrateFlowExtensions(\n      flowExtensionsToMigrate,\n      options.appId,\n      dashboardOnlyExtensions,\n      options.developerPlatformClient,\n    )\n    remoteExtensions = remoteExtensions.concat(newRemoteExtensions)\n  }\n\n  const matchExtensions = await automaticMatchmaking(localExtensions, remoteExtensions, validIdentifiers, 'uuid')\n\n  let validMatches = matchExtensions.identifiers\n  const extensionsToCreate = matchExtensions.toCreate ?? []\n\n  for (const pending of matchExtensions.toConfirm) {\n    // eslint-disable-next-line no-await-in-loop\n    const confirmed = await matchConfirmationPrompt(pending.local, pending.remote)\n    if (confirmed) {\n      validMatches[pending.local.localIdentifier] = pending.remote.uuid\n    } else {\n      extensionsToCreate.push(pending.local)\n    }\n  }\n\n  let onlyRemoteExtensions = matchExtensions.toManualMatch.remote ?? []\n\n  if (matchExtensions.toManualMatch.local.length > 0) {\n    const matchResult = await manualMatchIds(matchExtensions.toManualMatch, 'uuid')\n    validMatches = {...validMatches, ...matchResult.identifiers}\n    extensionsToCreate.push(...matchResult.toCreate)\n    onlyRemoteExtensions = matchResult.onlyRemote\n  }\n\n  return {\n    validMatches,\n    extensionsToCreate,\n    dashboardOnlyExtensions,\n  }\n}\n\nexport async function deployConfirmed(\n  options: EnsureDeploymentIdsPresenceOptions,\n  extensionRegistrations: RemoteSource[],\n  configurationRegistrations: RemoteSource[],\n  {\n    validMatches,\n    extensionsToCreate,\n  }: {\n    validMatches: IdentifiersExtensions\n    extensionsToCreate: LocalSource[]\n  },\n) {\n  const {extensionsNonUuidManaged, extensionsIdsNonUuidManaged} = await ensureNonUuidManagedExtensionsIds(\n    configurationRegistrations,\n    options.app,\n    options.appId,\n    options.includeDraftExtensions,\n    options.developerPlatformClient,\n  )\n\n  const validMatchesById: {[key: string]: string} = {}\n  if (extensionsToCreate.length > 0) {\n    const newIdentifiers = await createExtensions(extensionsToCreate, options.appId, options.developerPlatformClient)\n    for (const [localIdentifier, registration] of Object.entries(newIdentifiers)) {\n      validMatches[localIdentifier] = registration.uuid\n      validMatchesById[localIdentifier] = registration.id\n    }\n  }\n\n  // For extensions we also need the match by ID, not only UUID (doesn't apply to functions)\n  for (const [localIdentifier, uuid] of Object.entries(validMatches)) {\n    const registration = extensionRegistrations.find((registration) => registration.uuid === uuid)\n    if (registration) validMatchesById[localIdentifier] = registration.id\n  }\n\n  return {\n    extensions: validMatches,\n    extensionIds: {...validMatchesById, ...extensionsIdsNonUuidManaged},\n    extensionsNonUuidManaged,\n  }\n}\n\nasync function ensureNonUuidManagedExtensionsIds(\n  remoteConfigurationRegistrations: RemoteSource[],\n  app: AppInterface,\n  appId: string,\n  includeDraftExtensions = false,\n  developerPlatformClient: DeveloperPlatformClient,\n) {\n  let localExtensionRegistrations = includeDraftExtensions ? app.draftableExtensions : app.allExtensions\n\n  localExtensionRegistrations = localExtensionRegistrations.filter((ext) => !ext.isUuidManaged())\n  const extensionsToCreate: LocalSource[] = []\n  const validMatches: {[key: string]: string} = {}\n  const validMatchesById: {[key: string]: string} = {}\n  localExtensionRegistrations.forEach((local) => {\n    const possibleMatch = remoteConfigurationRegistrations.find((remote) => {\n      return remote.type === developerPlatformClient.toExtensionGraphQLType(local.graphQLType)\n    })\n    if (possibleMatch) {\n      validMatches[local.localIdentifier] = possibleMatch.uuid\n      validMatchesById[local.localIdentifier] = possibleMatch.id\n    } else extensionsToCreate.push(local)\n  })\n\n  if (extensionsToCreate.length > 0) {\n    const newIdentifiers = await createExtensions(extensionsToCreate, appId, developerPlatformClient, false)\n    for (const [localIdentifier, registration] of Object.entries(newIdentifiers)) {\n      validMatches[localIdentifier] = registration.uuid\n      validMatchesById[localIdentifier] = registration.id\n    }\n  }\n\n  return {extensionsNonUuidManaged: validMatches, extensionsIdsNonUuidManaged: validMatchesById}\n}\n\nasync function createExtensions(\n  extensions: LocalSource[],\n  appId: string,\n  developerPlatformClient: DeveloperPlatformClient,\n  output = true,\n) {\n  const result: {[localIdentifier: string]: RemoteSource} = {}\n  let counter = 0\n  for (const extension of extensions) {\n    counter++\n    if (developerPlatformClient.supportsAtomicDeployments) {\n      // Just pretend to create the extension, as it's not necessary to do anything\n      // in this case.\n      result[extension.localIdentifier] = {\n        id: `${extension.localIdentifier}-${counter}`,\n        uuid: `${extension.localIdentifier}-${counter}`,\n        type: extension.type,\n        title: extension.handle,\n      }\n    } else {\n      // Create one at a time to avoid API rate limiting issues.\n      // eslint-disable-next-line no-await-in-loop\n      const registration = await createExtension(\n        appId,\n        extension.graphQLType,\n        extension.handle,\n        developerPlatformClient,\n        extension.contextValue,\n      )\n      if (output) outputCompleted(`Created extension ${extension.handle}.`)\n      result[extension.localIdentifier] = registration\n    }\n  }\n  return result\n}\n"]}