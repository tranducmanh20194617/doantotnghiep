import { EnsureDeploymentIdsPresenceOptions, LocalSource, RemoteSource } from './identifiers.js';
import { AppInterface } from '../../models/app/app.js';
import { MinimalOrganizationApp } from '../../models/organization.js';
import { IdentifiersExtensions } from '../../models/app/identifiers.js';
import { AppModuleVersion, DeveloperPlatformClient } from '../../utilities/developer-platform-client.js';
export interface ConfigExtensionIdentifiersBreakdown {
    existingFieldNames: string[];
    existingUpdatedFieldNames: string[];
    newFieldNames: string[];
    deletedFieldNames: string[];
}
export interface ExtensionIdentifierBreakdownInfo {
    title: string;
    experience: 'extension' | 'dashboard';
}
export declare function buildExtensionBreakdownInfo(title: string): ExtensionIdentifierBreakdownInfo;
export declare function buildDashboardBreakdownInfo(title: string): ExtensionIdentifierBreakdownInfo;
export interface ExtensionIdentifiersBreakdown {
    onlyRemote: ExtensionIdentifierBreakdownInfo[];
    toCreate: ExtensionIdentifierBreakdownInfo[];
    toUpdate: ExtensionIdentifierBreakdownInfo[];
}
export declare function extensionsIdentifiersDeployBreakdown(options: EnsureDeploymentIdsPresenceOptions): Promise<{
    extensionIdentifiersBreakdown: ExtensionIdentifiersBreakdown;
    extensionsToConfirm: {
        validMatches: IdentifiersExtensions;
        extensionsToCreate: LocalSource[];
        dashboardOnlyExtensions: RemoteSource[];
    };
    remoteExtensionsRegistrations: import("../../api/graphql/all_app_extension_registrations.js").RemoteExtensionRegistrations;
}>;
export declare function extensionsIdentifiersReleaseBreakdown(developerPlatformClient: DeveloperPlatformClient, apiKey: string, version: string): Promise<{
    extensionIdentifiersBreakdown: {
        onlyRemote: ExtensionIdentifierBreakdownInfo[];
        toCreate: ExtensionIdentifierBreakdownInfo[];
        toUpdate: ExtensionIdentifierBreakdownInfo[];
    };
    versionDetails: {
        id: number;
        uuid: string;
        versionTag: string;
        location: string;
        message: string;
        appModuleVersions: import("../../api/graphql/app_active_version.js").AppModuleVersion[];
    };
}>;
export declare function configExtensionsIdentifiersBreakdown({ developerPlatformClient, remoteApp, localApp, versionAppModules, release, }: {
    developerPlatformClient: DeveloperPlatformClient;
    apiKey: string;
    remoteApp: MinimalOrganizationApp;
    localApp: AppInterface;
    versionAppModules?: AppModuleVersion[];
    release?: boolean;
}): Promise<ConfigExtensionIdentifiersBreakdown | undefined>;
