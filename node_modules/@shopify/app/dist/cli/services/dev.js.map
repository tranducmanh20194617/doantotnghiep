{"version":3,"file":"dev.js","sourceRoot":"","sources":["../../../src/cli/services/dev.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  FrontendURLOptions,\n  PartnersURLs,\n  generateFrontendURL,\n  generatePartnersURLs,\n  getURLs,\n  shouldOrPromptUpdateURLs,\n  startTunnelPlugin,\n  updateURLs,\n} from './dev/urls.js'\nimport {ensureDevContext, enableDeveloperPreview, disableDeveloperPreview, developerPreviewUpdate} from './context.js'\nimport {fetchAppPreviewMode} from './dev/fetch.js'\nimport {installAppDependencies} from './dependencies.js'\nimport {DevConfig, DevProcesses, setupDevProcesses} from './dev/processes/setup-dev-processes.js'\nimport {frontAndBackendConfig} from './dev/processes/utils.js'\nimport {outputUpdateURLsResult, renderDev} from './dev/ui.js'\nimport {DeveloperPreviewController} from './dev/ui/components/Dev.js'\nimport {DevProcessFunction} from './dev/processes/types.js'\nimport {setCachedAppInfo} from './local-storage.js'\nimport {canEnablePreviewMode} from './extensions/common.js'\nimport {DeveloperPlatformClient, selectDeveloperPlatformClient} from '../utilities/developer-platform-client.js'\nimport {Web, isCurrentAppSchema, getAppScopesArray, AppInterface} from '../models/app/app.js'\nimport {OrganizationApp} from '../models/organization.js'\nimport {getAnalyticsTunnelType} from '../utilities/analytics.js'\nimport {ports} from '../constants.js'\nimport metadata from '../metadata.js'\nimport {SpecsAppConfiguration} from '../models/extensions/specifications/types/app_config.js'\nimport {Config} from '@oclif/core'\nimport {performActionWithRetryAfterRecovery} from '@shopify/cli-kit/common/retry'\nimport {AbortController} from '@shopify/cli-kit/node/abort'\nimport {checkPortAvailability, getAvailableTCPPort} from '@shopify/cli-kit/node/tcp'\nimport {TunnelClient} from '@shopify/cli-kit/node/plugins/tunnel'\nimport {getBackendPort} from '@shopify/cli-kit/node/environment'\nimport {basename} from '@shopify/cli-kit/node/path'\nimport {renderWarning} from '@shopify/cli-kit/node/ui'\nimport {reportAnalyticsEvent} from '@shopify/cli-kit/node/analytics'\nimport {OutputProcess, formatPackageManagerCommand, outputDebug} from '@shopify/cli-kit/node/output'\nimport {hashString} from '@shopify/cli-kit/node/crypto'\nimport {AbortError} from '@shopify/cli-kit/node/error'\n\nexport interface DevOptions {\n  directory: string\n  id?: number\n  configName?: string\n  apiKey?: string\n  storeFqdn?: string\n  reset: boolean\n  update: boolean\n  commandConfig: Config\n  skipDependenciesInstallation: boolean\n  subscriptionProductUrl?: string\n  checkoutCartUrl?: string\n  tunnelUrl?: string\n  noTunnel: boolean\n  theme?: string\n  themeExtensionPort?: number\n  notify?: string\n  graphiqlPort?: number\n  graphiqlKey?: string\n}\n\nexport async function dev(commandOptions: DevOptions) {\n  const config = await prepareForDev(commandOptions)\n  await actionsBeforeSettingUpDevProcesses(config)\n  const {processes, graphiqlUrl, previewUrl} = await setupDevProcesses(config)\n  await actionsBeforeLaunchingDevProcesses(config)\n  await launchDevProcesses({processes, previewUrl, graphiqlUrl, config})\n}\n\nasync function prepareForDev(commandOptions: DevOptions): Promise<DevConfig> {\n  // Be optimistic about tunnel creation and do it as early as possible\n  const tunnelPort = await getAvailableTCPPort()\n  let tunnelClient: TunnelClient | undefined\n  if (!commandOptions.tunnelUrl && !commandOptions.noTunnel) {\n    tunnelClient = await startTunnelPlugin(commandOptions.commandConfig, tunnelPort, 'cloudflare')\n  }\n\n  const developerPlatformClient = selectDeveloperPlatformClient()\n\n  const {\n    storeFqdn,\n    storeId,\n    remoteApp,\n    remoteAppUpdated,\n    updateURLs: cachedUpdateURLs,\n    localApp: app,\n  } = await ensureDevContext(commandOptions, developerPlatformClient)\n\n  const apiKey = remoteApp.apiKey\n  let localApp = app\n\n  if (!commandOptions.skipDependenciesInstallation && !localApp.usesWorkspaces) {\n    localApp = await installAppDependencies(localApp)\n  }\n\n  const graphiqlPort = commandOptions.graphiqlPort || ports.graphiql\n  const {graphiqlKey} = commandOptions\n\n  const {webs, ...network} = await setupNetworkingOptions(\n    localApp.webs,\n    graphiqlPort,\n    {\n      noTunnel: commandOptions.noTunnel,\n      tunnelUrl: commandOptions.tunnelUrl,\n    },\n    tunnelClient,\n    remoteApp.configuration,\n  )\n  localApp.webs = webs\n\n  const partnerUrlsUpdated = await handleUpdatingOfPartnerUrls(\n    webs,\n    commandOptions.update,\n    network,\n    localApp,\n    cachedUpdateURLs,\n    remoteApp,\n    apiKey,\n    developerPlatformClient,\n  )\n\n  return {\n    storeFqdn,\n    storeId,\n    remoteApp,\n    remoteAppUpdated,\n    localApp,\n    developerPlatformClient,\n    commandOptions,\n    network,\n    partnerUrlsUpdated,\n    graphiqlPort,\n    graphiqlKey,\n  }\n}\n\nasync function actionsBeforeSettingUpDevProcesses({localApp, remoteApp}: DevConfig) {\n  if (\n    isCurrentAppSchema(localApp.configuration) &&\n    !localApp.configuration.access_scopes?.use_legacy_install_flow &&\n    localApp.configuration.access_scopes?.scopes !== remoteApp.configuration?.access_scopes?.scopes\n  ) {\n    const nextSteps = [\n      [\n        'Run',\n        {command: formatPackageManagerCommand(localApp.packageManager, 'shopify app deploy')},\n        'to push your scopes to the Partner Dashboard',\n      ],\n    ]\n\n    renderWarning({\n      headline: [`The scopes in your TOML don't match the scopes in your Partner Dashboard`],\n      body: [\n        `Scopes in ${basename(localApp.configuration.path)}:`,\n        scopesMessage(getAppScopesArray(localApp.configuration)),\n        '\\n',\n        'Scopes in Partner Dashboard:',\n        scopesMessage(remoteApp.configuration?.access_scopes?.scopes?.split(',') || []),\n      ],\n      nextSteps,\n    })\n  }\n}\n\nasync function actionsBeforeLaunchingDevProcesses(config: DevConfig) {\n  setPreviousAppId(config.commandOptions.directory, config.remoteApp.apiKey)\n\n  await logMetadataForDev({\n    devOptions: config.commandOptions,\n    tunnelUrl: config.network.proxyUrl,\n    shouldUpdateURLs: config.partnerUrlsUpdated,\n    storeFqdn: config.storeFqdn,\n  })\n\n  await reportAnalyticsEvent({config: config.commandOptions.commandConfig, exitMode: 'ok'})\n}\n\nasync function handleUpdatingOfPartnerUrls(\n  webs: Web[],\n  commandSpecifiedToUpdate: boolean,\n  network: {\n    proxyUrl: string\n    currentUrls: PartnersURLs\n  },\n  localApp: AppInterface,\n  cachedUpdateURLs: boolean | undefined,\n  remoteApp: Omit<OrganizationApp, 'apiSecretKeys'> & {apiSecret?: string | undefined},\n  apiKey: string,\n  developerPlatformClient: DeveloperPlatformClient,\n) {\n  const {backendConfig, frontendConfig} = frontAndBackendConfig(webs)\n  let shouldUpdateURLs = false\n  if (frontendConfig || backendConfig) {\n    if (commandSpecifiedToUpdate) {\n      const newURLs = generatePartnersURLs(\n        network.proxyUrl,\n        webs.map(({configuration}) => configuration.auth_callback_path).find((path) => path),\n        isCurrentAppSchema(localApp.configuration) ? localApp.configuration.app_proxy : undefined,\n      )\n      shouldUpdateURLs = await shouldOrPromptUpdateURLs({\n        currentURLs: network.currentUrls,\n        appDirectory: localApp.directory,\n        cachedUpdateURLs,\n        newApp: remoteApp.newApp,\n        localApp,\n        apiKey,\n      })\n      // When running dev app urls are pushed directly to API Client config instead of creating a new app version\n      // so current app version and API Client config will have diferent url values.\n      if (shouldUpdateURLs) await updateURLs(newURLs, apiKey, developerPlatformClient, localApp)\n      await outputUpdateURLsResult(shouldUpdateURLs, newURLs, remoteApp, localApp)\n    }\n  }\n  return shouldUpdateURLs\n}\n\nasync function setupNetworkingOptions(\n  webs: Web[],\n  graphiqlPort: number,\n  frontEndOptions: Pick<FrontendURLOptions, 'noTunnel' | 'tunnelUrl'>,\n  tunnelClient?: TunnelClient,\n  remoteAppConfig?: SpecsAppConfiguration,\n) {\n  const {backendConfig, frontendConfig} = frontAndBackendConfig(webs)\n\n  await validateCustomPorts(webs, graphiqlPort)\n\n  // generateFrontendURL still uses the old naming of frontendUrl and frontendPort,\n  // we can rename them to proxyUrl and proxyPort when we delete dev.ts\n  const [{frontendUrl, frontendPort: proxyPort, usingLocalhost}, backendPort, currentUrls] = await Promise.all([\n    generateFrontendURL({\n      ...frontEndOptions,\n      tunnelClient,\n    }),\n    getBackendPort() || backendConfig?.configuration.port || getAvailableTCPPort(),\n    getURLs(remoteAppConfig),\n  ])\n  const proxyUrl = usingLocalhost ? `${frontendUrl}:${proxyPort}` : frontendUrl\n\n  let frontendPort = frontendConfig?.configuration.port\n  if (frontendConfig) {\n    if (!frontendPort) {\n      frontendPort = frontendConfig === backendConfig ? backendPort : await getAvailableTCPPort()\n    }\n    frontendConfig.configuration.port = frontendPort\n  }\n  frontendPort = frontendPort ?? (await getAvailableTCPPort())\n\n  return {\n    proxyUrl,\n    proxyPort,\n    frontendPort,\n    backendPort,\n    currentUrls,\n    webs,\n  }\n}\n\nasync function launchDevProcesses({\n  processes,\n  previewUrl,\n  graphiqlUrl,\n  config,\n}: {\n  processes: DevProcesses\n  previewUrl: string\n  graphiqlUrl: string | undefined\n  config: DevConfig\n}) {\n  const abortController = new AbortController()\n  const processesForTaskRunner: OutputProcess[] = processes.map((process) => {\n    const outputProcess: OutputProcess = {\n      prefix: process.prefix,\n      action: async (stdout, stderr, signal) => {\n        const fn = process.function as DevProcessFunction<typeof process.options>\n        return fn({stdout, stderr, abortSignal: signal}, process.options)\n      },\n    }\n    return outputProcess\n  })\n\n  const apiKey = config.remoteApp.apiKey\n  const developerPlatformClient = config.developerPlatformClient\n  const app = {\n    canEnablePreviewMode: await canEnablePreviewMode({\n      localApp: config.localApp,\n      developerPlatformClient,\n      apiKey,\n      organizationId: config.remoteApp.organizationId,\n    }),\n    developmentStorePreviewEnabled: config.remoteApp.developmentStorePreviewEnabled,\n    apiKey,\n    developerPlatformClient,\n  }\n\n  return renderDev({\n    processes: processesForTaskRunner,\n    previewUrl,\n    graphiqlUrl,\n    graphiqlPort: config.graphiqlPort,\n    app,\n    abortController,\n    developerPreview: developerPreviewController(apiKey, developerPlatformClient),\n  })\n}\n\nexport function developerPreviewController(\n  apiKey: string,\n  developerPlatformClient: DeveloperPlatformClient,\n): DeveloperPreviewController {\n  const refreshToken = async () => {\n    await developerPlatformClient.refreshToken()\n  }\n\n  const withRefreshToken = async <T>(\n    fn: (developerPlatformClient: DeveloperPlatformClient) => Promise<T>,\n  ): Promise<T> => {\n    try {\n      const result = await performActionWithRetryAfterRecovery(async () => fn(developerPlatformClient), refreshToken)\n      return result\n    } catch (err) {\n      outputDebug('Failed to refresh token')\n      throw err\n    }\n  }\n\n  return {\n    fetchMode: async () =>\n      withRefreshToken(async (developerPlatformClient: DeveloperPlatformClient) =>\n        Boolean(await fetchAppPreviewMode(apiKey, developerPlatformClient)),\n      ),\n    enable: async () =>\n      withRefreshToken(async (developerPlatformClient: DeveloperPlatformClient) => {\n        await enableDeveloperPreview({apiKey, developerPlatformClient})\n      }),\n    disable: async () =>\n      withRefreshToken(async (developerPlatformClient: DeveloperPlatformClient) => {\n        await disableDeveloperPreview({apiKey, developerPlatformClient})\n      }),\n    update: async (state: boolean) =>\n      withRefreshToken(async (developerPlatformClient: DeveloperPlatformClient) =>\n        developerPreviewUpdate({apiKey, developerPlatformClient, enabled: state}),\n      ),\n  }\n}\n\nexport async function logMetadataForDev(options: {\n  devOptions: DevOptions\n  tunnelUrl: string\n  shouldUpdateURLs: boolean\n  storeFqdn: string\n}) {\n  const tunnelType = await getAnalyticsTunnelType(options.devOptions.commandConfig, options.tunnelUrl)\n  await metadata.addPublicMetadata(() => ({\n    cmd_dev_tunnel_type: tunnelType,\n    cmd_dev_tunnel_custom_hash: tunnelType === 'custom' ? hashString(options.tunnelUrl) : undefined,\n    cmd_dev_urls_updated: options.shouldUpdateURLs,\n    store_fqdn_hash: hashString(options.storeFqdn),\n    cmd_app_dependency_installation_skipped: options.devOptions.skipDependenciesInstallation,\n    cmd_app_reset_used: options.devOptions.reset,\n  }))\n\n  await metadata.addSensitiveMetadata(() => ({\n    store_fqdn: options.storeFqdn,\n    cmd_dev_tunnel_custom: tunnelType === 'custom' ? options.tunnelUrl : undefined,\n  }))\n}\n\nexport function scopesMessage(scopes: string[]) {\n  return {\n    list: {\n      items: scopes.length === 0 ? ['No scopes'] : scopes,\n    },\n  }\n}\n\nexport async function validateCustomPorts(webConfigs: Web[], graphiqlPort: number) {\n  const allPorts = webConfigs.map((config) => config.configuration.port).filter((port) => port)\n  const duplicatedPort = allPorts.find((port, index) => allPorts.indexOf(port) !== index)\n  if (duplicatedPort) {\n    throw new AbortError(`Found port ${duplicatedPort} for multiple webs.`, 'Please define a unique port for each web.')\n  }\n  await Promise.all([\n    ...allPorts.map(async (port) => {\n      const portAvailable = await checkPortAvailability(port!)\n      if (!portAvailable) {\n        throw new AbortError(`Hard-coded port ${port} is not available, please choose a different one.`)\n      }\n    }),\n    (async () => {\n      const portAvailable = await checkPortAvailability(graphiqlPort)\n      if (!portAvailable) {\n        const errorMessage = `Port ${graphiqlPort} is not available for serving GraphiQL.`\n        const tryMessage = ['Choose a different port by setting the', {command: '--graphiql-port'}, 'flag.']\n        throw new AbortError(errorMessage, tryMessage)\n      }\n    })(),\n  ])\n}\n\nexport function setPreviousAppId(directory: string, apiKey: string) {\n  setCachedAppInfo({directory, previousAppId: apiKey})\n}\n"]}