import { FindOrganizationQuery } from '../../api/graphql/find_org.js';
import { FindAppQuery } from '../../api/graphql/find_app.js';
import { AllDevStoresByOrganizationQuery, } from '../../api/graphql/all_dev_stores_by_org.js';
import { isServiceAccount, isUserAccount } from '../context/partner-account-info.js';
import { partnersRequest } from '@shopify/cli-kit/node/api/partners';
import { AbortError } from '@shopify/cli-kit/node/error';
import { outputContent, outputToken } from '@shopify/cli-kit/node/output';
export class NoOrgError extends AbortError {
    constructor(partnersAccount, organizationId) {
        let accountIdentifier = 'unknown';
        let identifierMessage = (formattedIdentifier) => `an ${formattedIdentifier}`;
        if (isServiceAccount(partnersAccount)) {
            accountIdentifier = partnersAccount.orgName;
            identifierMessage = (formattedIdentifier) => `the ${formattedIdentifier} organization`;
        }
        else if (isUserAccount(partnersAccount)) {
            accountIdentifier = partnersAccount.email;
            identifierMessage = (formattedIdentifier) => `the ${formattedIdentifier} user`;
        }
        const formattedIdentifier = outputContent `${outputToken.yellow(accountIdentifier)}`.value;
        const nextSteps = [
            [
                `Your current active session is associated with ${identifierMessage(formattedIdentifier)} account. To start a new session with a different account, run`,
                { command: 'shopify auth logout' },
            ],
            [
                'Have you',
                {
                    link: {
                        label: 'created a Shopify Partners organization',
                        url: 'https://partners.shopify.com/signup',
                    },
                },
                {
                    char: '?',
                },
            ],
            [
                'Does your account include',
                {
                    subdued: 'Manage app',
                },
                'permissions?, please contact the owner of the organization to grant you access.',
            ],
            'Have you confirmed your accounts from the emails you received?',
            [
                'Need to connect to a different App or organization? Run the command again with',
                {
                    command: '--reset',
                },
            ],
        ];
        if (organizationId) {
            nextSteps.push([
                'Do you have access to the right Shopify Partners organization? The CLI is loading',
                { link: { label: 'this organization', url: `https://partner.shopify.com/${organizationId}` } },
            ]);
        }
        super(`No Organization found`, undefined, nextSteps);
    }
}
/**
 * Fetch all organizations the user belongs to
 * If the user doesn't belong to any org, throw an error
 * @param developerPlatformClient - The client to access the platform API
 * @returns List of organizations
 */
export async function fetchOrganizations(developerPlatformClient) {
    const organizations = await developerPlatformClient.organizations();
    if (organizations.length === 0)
        throw new NoOrgError(await developerPlatformClient.accountInfo());
    return organizations;
}
/**
 * Fetch all apps and stores for the given organization
 * @param orgId - Organization ID
 * @param token - Token to access partners API
 * @returns Current organization details and list of apps and stores
 */
export async function fetchOrgAndApps(orgId, partnersSession, title) {
    const query = FindOrganizationQuery;
    const params = { id: orgId };
    if (title)
        params.title = title;
    const result = await partnersRequest(query, partnersSession.token, params);
    const org = result.organizations.nodes[0];
    if (!org)
        throw new NoOrgError(partnersSession.accountInfo, orgId);
    const parsedOrg = { id: org.id, businessName: org.businessName };
    const appsWithOrg = org.apps.nodes.map((app) => ({ ...app, organizationId: org.id }));
    return { organization: parsedOrg, apps: { ...org.apps, nodes: appsWithOrg }, stores: [] };
}
export var Flag;
(function (Flag) {
    Flag[Flag["DeclarativeWebhooks"] = 0] = "DeclarativeWebhooks";
})(Flag || (Flag = {}));
const FlagMap = {
    '5b25141b': Flag.DeclarativeWebhooks,
};
export async function fetchAppDetailsFromApiKey(apiKey, token) {
    const res = await partnersRequest(FindAppQuery, token, {
        apiKey,
    });
    const app = res.app;
    if (app) {
        const flags = filterDisabledFlags(app.disabledFlags);
        return { ...app, flags };
    }
}
export function filterDisabledFlags(disabledFlags = []) {
    const defaultActiveFlags = [Flag.DeclarativeWebhooks];
    const remoteDisabledFlags = disabledFlags.map((flag) => FlagMap[flag]);
    return defaultActiveFlags.filter((flag) => !remoteDisabledFlags.includes(flag));
}
export async function fetchAppPreviewMode(apiKey, developerPlatformClient) {
    const res = await developerPlatformClient.appPreviewMode({ apiKey });
    return res.app?.developmentStorePreviewEnabled;
}
export async function fetchOrgFromId(id, developerPlatformClient) {
    const org = await developerPlatformClient.orgFromId(id);
    if (!org)
        throw new NoOrgError((await developerPlatformClient.session()).accountInfo, id);
    return org;
}
export async function fetchAllDevStores(orgId, token) {
    const query = AllDevStoresByOrganizationQuery;
    const result = await partnersRequest(query, token, {
        id: orgId,
    });
    return result.organizations.nodes[0].stores.nodes;
}
/**
 * Returns the organization and the store based on passed domain
 * If a store with that domain doesn't exist the method returns undefined
 * @param orgId - Organization ID
 * @param shopDomain - shop domain fqdn
 * @param developerPlatformClient - The client to access the platform API
 */
export async function fetchStoreByDomain(orgId, shopDomain, developerPlatformClient) {
    const result = await developerPlatformClient.storeByDomain(orgId, shopDomain);
    const org = result.organizations.nodes[0];
    if (!org) {
        return undefined;
    }
    const parsedOrg = { id: org.id, businessName: org.businessName };
    const store = org.stores.nodes[0];
    return { organization: parsedOrg, store };
}
//# sourceMappingURL=fetch.js.map