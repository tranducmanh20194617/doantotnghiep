{"version":3,"file":"select-app.js","sourceRoot":"","sources":["../../../../src/cli/services/dev/select-app.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,aAAa,EAAE,oBAAoB,EAAE,eAAe,EAAC,MAAM,sBAAsB,CAAA;AAEzF,OAAO,EAAC,oBAAoB,EAAE,oBAAoB,EAAC,MAAM,qBAAqB,CAAA;AAE9E,OAAO,EAAC,UAAU,EAAC,MAAM,8BAA8B,CAAA;AAEvD;;;;;;;;GAQG;AACH,MAAM,CAAC,KAAK,UAAU,iBAAiB,CACrC,YAAoB,EACpB,IAA8B,EAC9B,YAAqB,EACrB,GAAiB,EACjB,uBAAgD,EAChD,OAIC;IAED,IAAI,YAAY,GAAG,IAAI,CAAC,MAAM,KAAK,CAAC,CAAA;IACpC,IAAI,CAAC,YAAY,EAAE;QACjB,UAAU,CAAC,yEAAyE,CAAC,CAAA;QACrF,YAAY,GAAG,MAAM,oBAAoB,EAAE,CAAA;KAC5C;IACD,IAAI,YAAY,EAAE;QAChB,MAAM,IAAI,GAAG,MAAM,aAAa,CAAC,YAAY,CAAC,CAAA;QAC9C,OAAO,uBAAuB,CAAC,SAAS,CAAC,GAAG,EAAE,IAAI,EAAE,OAAO,CAAC,CAAA;KAC7D;SAAM;QACL,MAAM,iBAAiB,GAAG,MAAM,eAAe,CAAC,IAAI,EAAE,YAAY,EAAE,GAAG,CAAC,EAAE,EAAE,EAAC,SAAS,EAAE,OAAO,EAAE,SAAS,EAAC,CAAC,CAAA;QAC5G,MAAM,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,MAAM,KAAK,iBAAiB,CAAE,CAAA;QAEjE,MAAM,IAAI,GAAG,oBAAoB,EAAE,CAAA;QACnC,MAAM,KAAK,GAAI,IAAI,EAAE,KAAkC,IAAI,EAAE,CAAA;QAE7D,IAAI,KAAK,CAAC,iBAAiB,CAAC;YAAE,oBAAoB,CAAC,EAAC,YAAY,EAAE,KAAK,CAAC,iBAAiB,CAAC,EAAE,aAAa,EAAE,KAAK,EAAC,CAAC,CAAA;QAElH,MAAM,eAAe,GAAG,MAAM,uBAAuB,CAAC,SAAS,CAAC,GAAG,CAAC,CAAA;QACpE,OAAO,eAAgB,CAAA;KACxB;AACH,CAAC","sourcesContent":["import {appNamePrompt, createAsNewAppPrompt, selectAppPrompt} from '../../prompts/dev.js'\nimport {Organization, MinimalOrganizationApp, OrganizationApp} from '../../models/organization.js'\nimport {getCachedCommandInfo, setCachedCommandInfo} from '../local-storage.js'\nimport {DeveloperPlatformClient} from '../../utilities/developer-platform-client.js'\nimport {outputInfo} from '@shopify/cli-kit/node/output'\n\n/**\n * Select an app from env, list or create a new one:\n * If there is no valid app yet, prompt the user to select one from the list or create a new one.\n * If no apps exists, we automatically prompt the user to create a new one.\n * @param app - Current local app information\n * @param apps - List of remote available apps\n * @param orgId - Current Organization\n * @returns The selected (or created) app\n */\nexport async function selectOrCreateApp(\n  localAppName: string,\n  apps: MinimalOrganizationApp[],\n  hasMorePages: boolean,\n  org: Organization,\n  developerPlatformClient: DeveloperPlatformClient,\n  options?: {\n    isLaunchable?: boolean\n    scopesArray?: string[]\n    directory?: string\n  },\n): Promise<OrganizationApp> {\n  let createNewApp = apps.length === 0\n  if (!createNewApp) {\n    outputInfo(`\\nBefore proceeding, your project needs to be associated with an app.\\n`)\n    createNewApp = await createAsNewAppPrompt()\n  }\n  if (createNewApp) {\n    const name = await appNamePrompt(localAppName)\n    return developerPlatformClient.createApp(org, name, options)\n  } else {\n    const selectedAppApiKey = await selectAppPrompt(apps, hasMorePages, org.id, {directory: options?.directory})\n    const app = apps.find((app) => app.apiKey === selectedAppApiKey)!\n\n    const data = getCachedCommandInfo()\n    const tomls = (data?.tomls as {[key: string]: unknown}) ?? {}\n\n    if (tomls[selectedAppApiKey]) setCachedCommandInfo({selectedToml: tomls[selectedAppApiKey], askConfigName: false})\n\n    const fullSelectedApp = await developerPlatformClient.appFromId(app)\n    return fullSelectedApp!\n  }\n}\n"]}