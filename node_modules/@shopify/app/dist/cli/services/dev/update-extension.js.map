{"version":3,"file":"update-extension.js","sourceRoot":"","sources":["../../../../src/cli/services/dev/update-extension.ts"],"names":[],"mappings":"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","sourcesContent":["import {ExtensionUpdateDraftInput, ExtensionUpdateSchema} from '../../api/graphql/update_draft.js'\nimport {loadConfigurationFile, parseConfigurationFile, parseConfigurationObject} from '../../models/app/loader.js'\nimport {ExtensionInstance} from '../../models/extensions/extension-instance.js'\nimport {ExtensionsArraySchema, UnifiedSchema} from '../../models/extensions/schemas.js'\nimport {DeveloperPlatformClient} from '../../utilities/developer-platform-client.js'\nimport {AbortError} from '@shopify/cli-kit/node/error'\nimport {readFile} from '@shopify/cli-kit/node/fs'\nimport {OutputMessage, outputInfo} from '@shopify/cli-kit/node/output'\nimport {relativizePath} from '@shopify/cli-kit/node/path'\nimport {errorsToString as zodErrorsToString, zod} from '@shopify/cli-kit/node/schema'\nimport {Writable} from 'stream'\n\ninterface UpdateExtensionDraftOptions {\n  extension: ExtensionInstance\n  developerPlatformClient: DeveloperPlatformClient\n  apiKey: string\n  registrationId: string\n  stdout: Writable\n  stderr: Writable\n}\n\nexport async function updateExtensionDraft({\n  extension,\n  developerPlatformClient,\n  apiKey,\n  registrationId,\n  stdout,\n  stderr,\n}: UpdateExtensionDraftOptions) {\n  let encodedFile: string | undefined\n  if (extension.features.includes('esbuild')) {\n    const content = await readFile(extension.outputPath)\n    if (!content) return\n    encodedFile = Buffer.from(content).toString('base64')\n  }\n\n  const config = (await extension.deployConfig({apiKey, developerPlatformClient})) || {}\n\n  const extensionInput: ExtensionUpdateDraftInput = {\n    apiKey,\n    config: JSON.stringify({\n      ...config,\n      serialized_script: encodedFile,\n    }),\n    handle: extension.handle,\n    context: extension.contextValue,\n    registrationId,\n  }\n\n  const mutationResult: ExtensionUpdateSchema = await developerPlatformClient.updateExtension(extensionInput)\n  if (mutationResult.extensionUpdateDraft?.userErrors?.length > 0) {\n    const errors = mutationResult.extensionUpdateDraft.userErrors.map((error) => error.message).join(', ')\n    stderr.write(`Error while updating drafts: ${errors}`)\n  } else {\n    const draftUpdateSuccesMessage = extension.draftMessages.successMessage\n    if (draftUpdateSuccesMessage) outputInfo(draftUpdateSuccesMessage, stdout)\n  }\n}\n\ninterface UpdateExtensionConfigOptions {\n  extension: ExtensionInstance\n  stdout: Writable\n}\n\nexport async function reloadExtensionConfig({extension}: UpdateExtensionConfigOptions) {\n  const abort = (\n    errorMessage: OutputMessage,\n    _fallbackOutput?: unknown,\n    _path?: string,\n    rawErrors?: zod.ZodIssueBase[],\n  ) => {\n    let message = typeof errorMessage === 'string' ? errorMessage : errorMessage.value\n    if (rawErrors) message = zodErrorsToString(rawErrors)\n    throw new AbortError(message)\n  }\n\n  let configObject = await loadConfigurationFile(extension.configurationPath)\n  const {extensions} = ExtensionsArraySchema.parse(configObject)\n\n  if (extensions) {\n    // If the config has an array, find our extension using the handle.\n    const configuration = await parseConfigurationFile(UnifiedSchema, extension.configurationPath, abort)\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const extensionConfig = configuration.extensions.find((config: any) => config.handle === extension.handle)\n    if (!extensionConfig) {\n      abort(\n        `ERROR: Invalid handle\n  - Expected handle: \"${extension.handle}\"\n  - Configuration file path: ${relativizePath(extension.configurationPath)}.\n  - Handles are immutable, you can't change them once they are set.`,\n      )\n    }\n\n    configObject = {...configuration, ...extensionConfig}\n  }\n\n  const newConfig = await parseConfigurationObject(\n    extension.specification.schema,\n    extension.configurationPath,\n    configObject,\n    abort,\n  )\n\n  const previousConfig = extension.configuration\n  extension.configuration = newConfig\n\n  return {\n    previousConfig,\n    newConfig,\n  }\n}\n"]}