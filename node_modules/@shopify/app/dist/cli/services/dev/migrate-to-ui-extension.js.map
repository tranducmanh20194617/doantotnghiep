{"version":3,"file":"migrate-to-ui-extension.js","sourceRoot":"","sources":["../../../../src/cli/services/dev/migrate-to-ui-extension.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  MigrateToUiExtensionSchema,\n  MigrateToUiExtensionVariables,\n} from '../../api/graphql/extension_migrate_to_ui_extension.js'\nimport {LocalSource, RemoteSource} from '../context/identifiers.js'\nimport {IdentifiersExtensions} from '../../models/app/identifiers.js'\nimport {getExtensionIds, LocalRemoteSource} from '../context/id-matching.js'\nimport {DeveloperPlatformClient} from '../../utilities/developer-platform-client.js'\nimport {AbortError} from '@shopify/cli-kit/node/error'\nimport {slugify} from '@shopify/cli-kit/common/string'\n\nexport function getUIExtensionsToMigrate(\n  localSources: LocalSource[],\n  remoteSources: RemoteSource[],\n  identifiers: IdentifiersExtensions,\n) {\n  const ids = getExtensionIds(localSources, identifiers)\n  const remoteExtensionTypesToMigrate = ['CHECKOUT_UI_EXTENSION']\n\n  return localSources.reduce<LocalRemoteSource[]>((accumulator, localSource) => {\n    if (localSource.type === 'ui_extension') {\n      const remoteSource = remoteSources.find((source) => {\n        const matchesId = source.uuid === ids[localSource.localIdentifier]\n        const matchesTitle = slugify(source.title) === slugify(localSource.handle)\n\n        return matchesId || matchesTitle\n      })\n\n      if (!remoteSource) {\n        return accumulator\n      }\n\n      const typeIsToMigrate = remoteExtensionTypesToMigrate.includes(remoteSource.type)\n\n      if (typeIsToMigrate) {\n        accumulator.push({local: localSource, remote: remoteSource})\n      }\n    }\n\n    return accumulator\n  }, [])\n}\n\nexport async function migrateExtensionsToUIExtension(\n  extensionsToMigrate: LocalRemoteSource[],\n  appId: string,\n  remoteExtensions: RemoteSource[],\n  developerPlatformClient: DeveloperPlatformClient,\n) {\n  await Promise.all(\n    extensionsToMigrate.map(({remote}) => migrateExtensionToUIExtension(appId, remote.id, developerPlatformClient)),\n  )\n\n  return remoteExtensions.map((extension) => {\n    if (extensionsToMigrate.some(({remote}) => remote.id === extension.id)) {\n      return {\n        ...extension,\n        type: 'UI_EXTENSION',\n      }\n    }\n    return extension\n  })\n}\n\nexport async function migrateExtensionToUIExtension(\n  apiKey: MigrateToUiExtensionVariables['apiKey'],\n  registrationId: MigrateToUiExtensionVariables['registrationId'],\n  developerPlatformClient: DeveloperPlatformClient,\n) {\n  const variables: MigrateToUiExtensionVariables = {\n    apiKey,\n    registrationId,\n  }\n\n  const result: MigrateToUiExtensionSchema = await developerPlatformClient.migrateToUiExtension(variables)\n\n  if (result?.migrateToUiExtension?.userErrors?.length > 0) {\n    const errors = result.migrateToUiExtension.userErrors.map((error) => error.message).join(', ')\n    throw new AbortError(errors)\n  }\n\n  if (!result?.migrateToUiExtension?.migratedToUiExtension) {\n    throw new AbortError(\"Couldn't migrate to UI extension\")\n  }\n}\n"]}