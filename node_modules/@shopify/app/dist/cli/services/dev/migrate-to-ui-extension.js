import { getExtensionIds } from '../context/id-matching.js';
import { AbortError } from '@shopify/cli-kit/node/error';
import { slugify } from '@shopify/cli-kit/common/string';
export function getUIExtensionsToMigrate(localSources, remoteSources, identifiers) {
    const ids = getExtensionIds(localSources, identifiers);
    const remoteExtensionTypesToMigrate = ['CHECKOUT_UI_EXTENSION'];
    return localSources.reduce((accumulator, localSource) => {
        if (localSource.type === 'ui_extension') {
            const remoteSource = remoteSources.find((source) => {
                const matchesId = source.uuid === ids[localSource.localIdentifier];
                const matchesTitle = slugify(source.title) === slugify(localSource.handle);
                return matchesId || matchesTitle;
            });
            if (!remoteSource) {
                return accumulator;
            }
            const typeIsToMigrate = remoteExtensionTypesToMigrate.includes(remoteSource.type);
            if (typeIsToMigrate) {
                accumulator.push({ local: localSource, remote: remoteSource });
            }
        }
        return accumulator;
    }, []);
}
export async function migrateExtensionsToUIExtension(extensionsToMigrate, appId, remoteExtensions, developerPlatformClient) {
    await Promise.all(extensionsToMigrate.map(({ remote }) => migrateExtensionToUIExtension(appId, remote.id, developerPlatformClient)));
    return remoteExtensions.map((extension) => {
        if (extensionsToMigrate.some(({ remote }) => remote.id === extension.id)) {
            return {
                ...extension,
                type: 'UI_EXTENSION',
            };
        }
        return extension;
    });
}
export async function migrateExtensionToUIExtension(apiKey, registrationId, developerPlatformClient) {
    const variables = {
        apiKey,
        registrationId,
    };
    const result = await developerPlatformClient.migrateToUiExtension(variables);
    if (result?.migrateToUiExtension?.userErrors?.length > 0) {
        const errors = result.migrateToUiExtension.userErrors.map((error) => error.message).join(', ');
        throw new AbortError(errors);
    }
    if (!result?.migrateToUiExtension?.migratedToUiExtension) {
        throw new AbortError("Couldn't migrate to UI extension");
    }
}
//# sourceMappingURL=migrate-to-ui-extension.js.map