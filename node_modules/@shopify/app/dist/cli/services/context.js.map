{"version":3,"file":"context.js","sourceRoot":"","sources":["../../../src/cli/services/context.ts"],"names":[],"mappings":"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","sourcesContent":["import {selectOrCreateApp} from './dev/select-app.js'\nimport {fetchOrgFromId, fetchOrganizations, fetchStoreByDomain} from './dev/fetch.js'\nimport {convertToTestStoreIfNeeded, selectStore} from './dev/select-store.js'\nimport {ensureDeploymentIdsPresence} from './context/identifiers.js'\nimport {createExtension} from './dev/create-extension.js'\nimport {CachedAppInfo, clearCachedAppInfo, getCachedAppInfo, setCachedAppInfo} from './local-storage.js'\nimport link from './app/config/link.js'\nimport {writeAppConfigurationFile} from './app/write-app-configuration-file.js'\nimport {fetchAppRemoteConfiguration} from './app/select-app.js'\nimport {fetchSpecifications} from './generate/fetch-extension-specifications.js'\nimport {reuseDevConfigPrompt, selectOrganizationPrompt} from '../prompts/dev.js'\nimport {\n  AppConfiguration,\n  AppInterface,\n  isCurrentAppSchema,\n  appIsLaunchable,\n  getAppScopesArray,\n  CurrentAppConfiguration,\n} from '../models/app/app.js'\nimport {Identifiers, UuidOnlyIdentifiers, updateAppIdentifiers, getAppIdentifiers} from '../models/app/identifiers.js'\nimport {Organization, OrganizationApp, OrganizationStore} from '../models/organization.js'\nimport metadata from '../metadata.js'\nimport {\n  getAppConfigurationFileName,\n  getAppConfigurationShorthand,\n  loadApp,\n  loadAppConfiguration,\n  loadAppName,\n} from '../models/app/loader.js'\nimport {ExtensionInstance} from '../models/extensions/extension-instance.js'\n\nimport {ExtensionRegistration} from '../api/graphql/all_app_extension_registrations.js'\nimport {\n  DevelopmentStorePreviewUpdateInput,\n  DevelopmentStorePreviewUpdateSchema,\n} from '../api/graphql/development_preview.js'\nimport {loadLocalExtensionsSpecifications} from '../models/extensions/load-specifications.js'\nimport {DeveloperPlatformClient, selectDeveloperPlatformClient} from '../utilities/developer-platform-client.js'\nimport {tryParseInt} from '@shopify/cli-kit/common/string'\nimport {TokenItem, renderConfirmationPrompt, renderInfo} from '@shopify/cli-kit/node/ui'\nimport {partnersFqdn} from '@shopify/cli-kit/node/context/fqdn'\nimport {AbortError} from '@shopify/cli-kit/node/error'\nimport {outputContent} from '@shopify/cli-kit/node/output'\nimport {getOrganization} from '@shopify/cli-kit/node/environment'\nimport {basename, joinPath} from '@shopify/cli-kit/node/path'\nimport {glob} from '@shopify/cli-kit/node/fs'\n\nexport const InvalidApiKeyErrorMessage = (apiKey: string) => {\n  return {\n    message: outputContent`Invalid Client ID: ${apiKey}`,\n    tryMessage: outputContent`You can find the Client ID in the app settings in the Partners Dashboard.`,\n  }\n}\n\nexport interface DevContextOptions {\n  directory: string\n  apiKey?: string\n  storeFqdn?: string\n  reset: boolean\n}\n\ninterface DevContextOutput {\n  remoteApp: Omit<OrganizationApp, 'apiSecretKeys'> & {apiSecret?: string}\n  remoteAppUpdated: boolean\n  storeFqdn: string\n  storeId: string\n  updateURLs: boolean | undefined\n  localApp: AppInterface\n}\n\n/**\n * Make sure there is a valid context to execute `generate extension`\n *\n * We just need a valid app API key to access the Specifications API.\n * - If the API key is provided via flag, we use it.\n * - Else, if there is an API key in the current config or cache, we use it.\n * - Else, we prompt the user to select/create an app.\n *\n * The selection is then cached as the \"dev\" app for the current directory.\n */\nexport async function ensureGenerateContext(options: {\n  apiKey?: string\n  directory: string\n  reset: boolean\n  developerPlatformClient: DeveloperPlatformClient\n  configName?: string\n}): Promise<string> {\n  const {apiKey, developerPlatformClient} = options\n  if (apiKey) {\n    const app = await appFromId({apiKey, developerPlatformClient})\n    if (!app) {\n      const errorMessage = InvalidApiKeyErrorMessage(apiKey)\n      throw new AbortError(errorMessage.message, errorMessage.tryMessage)\n    }\n    await logMetadataForLoadedContext(app)\n    return app.apiKey\n  }\n\n  const {cachedInfo, remoteApp} = await getAppContext(options)\n\n  if (cachedInfo?.appId && cachedInfo?.orgId) {\n    const org = await fetchOrgFromId(cachedInfo.orgId, options.developerPlatformClient)\n    const app =\n      remoteApp ||\n      (await appFromId({\n        apiKey: cachedInfo.appId,\n        organizationId: org.id,\n        developerPlatformClient: options.developerPlatformClient,\n      }))\n    if (!app || !org) {\n      const errorMessage = InvalidApiKeyErrorMessage(cachedInfo.appId)\n      throw new AbortError(errorMessage.message, errorMessage.tryMessage)\n    }\n    showReusedGenerateValues(org.businessName, cachedInfo)\n    await logMetadataForLoadedContext({\n      organizationId: app.organizationId,\n      apiKey: app.apiKey,\n    })\n    return app.apiKey\n  } else {\n    const orgId = cachedInfo?.orgId || (await selectOrg(options.developerPlatformClient))\n    const {organization, apps, hasMorePages} = await options.developerPlatformClient.orgAndApps(orgId)\n    const localAppName = await loadAppName(options.directory)\n    const selectedApp = await selectOrCreateApp(\n      localAppName,\n      apps,\n      hasMorePages,\n      organization,\n      options.developerPlatformClient,\n    )\n    setCachedAppInfo({\n      appId: selectedApp.apiKey,\n      title: selectedApp.title,\n      directory: options.directory,\n      orgId,\n    })\n    await logMetadataForLoadedContext({\n      organizationId: selectedApp.organizationId,\n      apiKey: selectedApp.apiKey,\n    })\n    return selectedApp.apiKey\n  }\n}\n\n/**\n * Make sure there is a valid context to execute `dev`\n * That means we have a valid organization, app and dev store selected.\n *\n * If there are app/store from flags, we check if they are valid. If they are not, throw an error.\n * If there is info in the cache or current configuration, check if it is still valid and return it.\n * If there is no info (or is invalid):\n *  - Show prompts to select an org, app and dev store\n *  - The info will be updated in the cache or current configuration\n *\n * @param options - Current dev context options\n * @returns The selected org, app and dev store\n */\nexport async function ensureDevContext(\n  options: DevContextOptions,\n  developerPlatformClient: DeveloperPlatformClient,\n): Promise<DevContextOutput> {\n  const {configuration, cachedInfo, remoteApp} = await getAppContext({\n    ...options,\n    developerPlatformClient,\n    promptLinkingApp: !options.apiKey,\n  })\n\n  const orgId = getOrganization() || cachedInfo?.orgId || (await selectOrg(developerPlatformClient))\n\n  let {app: selectedApp, store: selectedStore} = await fetchDevDataFromOptions(options, orgId, developerPlatformClient)\n  const organization = await fetchOrgFromId(orgId, developerPlatformClient)\n\n  if (!selectedApp || !selectedStore) {\n    // if we have selected an app or a dev store from a command flag, we keep them\n    // if not, we try to load the app or the dev store from the current config or cache\n    // if that's not available, we prompt the user to choose an existing one or create a new one\n    const [_selectedApp, _selectedStore] = await Promise.all([\n      selectedApp ||\n        remoteApp ||\n        (cachedInfo?.appId && appFromId({apiKey: cachedInfo.appId, organizationId: orgId, developerPlatformClient})),\n      selectedStore || (cachedInfo?.storeFqdn && storeFromFqdn(cachedInfo.storeFqdn, orgId, developerPlatformClient)),\n    ])\n\n    if (_selectedApp) {\n      selectedApp = _selectedApp\n    } else {\n      const {apps, hasMorePages} = await developerPlatformClient.orgAndApps(orgId)\n      // get toml names somewhere close to here\n      const localAppName = await loadAppName(options.directory)\n      selectedApp = await selectOrCreateApp(localAppName, apps, hasMorePages, organization, developerPlatformClient)\n    }\n\n    if (_selectedStore) {\n      selectedStore = _selectedStore\n    } else {\n      const allStores = await developerPlatformClient.devStoresForOrg(orgId)\n      selectedStore = await selectStore(allStores, organization, developerPlatformClient)\n    }\n  }\n\n  const specifications = await fetchSpecifications({developerPlatformClient, apiKey: selectedApp.apiKey})\n\n  selectedApp = {\n    ...selectedApp,\n    configuration: await fetchAppRemoteConfiguration(\n      selectedApp,\n      developerPlatformClient,\n      specifications,\n      selectedApp.flags,\n    ),\n  }\n\n  const localApp = await loadApp({\n    directory: options.directory,\n    specifications,\n    configName: getAppConfigurationShorthand(configuration.path),\n    remoteFlags: selectedApp.flags,\n  })\n\n  // We only update the cache or config if the current app is the right one\n  const rightApp = selectedApp.apiKey === cachedInfo?.appId\n  if (isCurrentAppSchema(configuration) && rightApp) {\n    if (cachedInfo) cachedInfo.storeFqdn = selectedStore?.shopDomain\n    const newConfiguration = {\n      ...configuration,\n      build: {\n        ...configuration.build,\n        dev_store_url: selectedStore?.shopDomain,\n      },\n    }\n    localApp.configuration = newConfiguration\n    await writeAppConfigurationFile(newConfiguration, localApp.configSchema)\n  } else if (!cachedInfo || rightApp) {\n    setCachedAppInfo({\n      appId: selectedApp.apiKey,\n      title: selectedApp.title,\n      directory: options.directory,\n      storeFqdn: selectedStore?.shopDomain,\n      orgId,\n    })\n  }\n\n  showReusedDevValues({\n    selectedApp,\n    selectedStore,\n    cachedInfo,\n    organization,\n  })\n\n  const result = buildOutput(selectedApp, selectedStore, localApp, cachedInfo)\n  await logMetadataForLoadedContext({\n    organizationId: result.remoteApp.organizationId,\n    apiKey: result.remoteApp.apiKey,\n  })\n  return result\n}\n\nconst resetHelpMessage = ['You can pass', {command: '--reset'}, 'to your command to reset your app configuration.']\n\ninterface AppFromIdOptions {\n  apiKey: string\n  organizationId?: string\n  developerPlatformClient: DeveloperPlatformClient\n}\n\nexport const appFromId = async ({\n  apiKey,\n  organizationId,\n  developerPlatformClient,\n}: AppFromIdOptions): Promise<OrganizationApp> => {\n  // eslint-disable-next-line no-param-reassign\n  organizationId =\n    organizationId ?? developerPlatformClient.requiresOrganization ? await selectOrg(developerPlatformClient) : '0'\n  const app = await developerPlatformClient.appFromId({\n    id: apiKey,\n    apiKey,\n    organizationId,\n  })\n  if (!app) throw new AbortError([`Couldn't find the app with Client ID`, {command: apiKey}], resetHelpMessage)\n  return app\n}\n\nconst storeFromFqdn = async (\n  storeFqdn: string,\n  orgId: string,\n  developerPlatformClient: DeveloperPlatformClient,\n): Promise<OrganizationStore> => {\n  const result = await fetchStoreByDomain(orgId, storeFqdn, developerPlatformClient)\n  if (result?.store) {\n    await convertToTestStoreIfNeeded(result.store, orgId, developerPlatformClient)\n    return result.store\n  } else {\n    throw new AbortError(`Couldn't find the store with domain \"${storeFqdn}\".`, resetHelpMessage)\n  }\n}\n\nfunction buildOutput(\n  app: OrganizationApp,\n  store: OrganizationStore,\n  localApp: AppInterface,\n  cachedInfo?: CachedAppInfo,\n): DevContextOutput {\n  return {\n    remoteApp: {\n      ...app,\n      apiSecret: app.apiSecretKeys.length === 0 ? undefined : app.apiSecretKeys[0]!.secret,\n    },\n    remoteAppUpdated: app.apiKey !== cachedInfo?.previousAppId,\n    storeFqdn: store.shopDomain,\n    storeId: store.shopId,\n    updateURLs: cachedInfo?.updateURLs,\n    localApp,\n  }\n}\n\nexport interface ReleaseContextOptions {\n  app: AppInterface\n  apiKey?: string\n  reset: boolean\n  force: boolean\n  developerPlatformClient?: DeveloperPlatformClient\n}\n\ninterface ReleaseContextOutput {\n  developerPlatformClient: DeveloperPlatformClient\n  app: AppInterface\n  remoteApp: OrganizationApp\n}\n\ninterface DeployContextOutput {\n  app: AppInterface\n  remoteApp: Omit<OrganizationApp, 'apiSecretKeys'>\n  identifiers: Identifiers\n  release: boolean\n}\n\n/**\n * If there is a cached ApiKey used for dev, retrieve that and ask the user if they want to reuse it\n * @param app - The local app object\n * @param developerPlatformClient - The client to access the platform API\n * @returns\n * OrganizationApp if a cached value is valid.\n * undefined if there is no cached value or the user doesn't want to use it.\n */\nasync function fetchDevAppAndPrompt(\n  app: AppInterface,\n  developerPlatformClient: DeveloperPlatformClient,\n): Promise<OrganizationApp | undefined> {\n  const cachedInfo = getCachedAppInfo(app.directory)\n  const devAppId = cachedInfo?.appId\n  if (!devAppId) return undefined\n\n  const partnersResponse = await appFromId({\n    apiKey: devAppId,\n    organizationId: cachedInfo.orgId ?? '0',\n    developerPlatformClient,\n  })\n  if (!partnersResponse) return undefined\n\n  const org = await fetchOrgFromId(partnersResponse.organizationId, developerPlatformClient)\n\n  showDevValues(org.businessName ?? 'unknown', partnersResponse.title)\n  const reuse = await reuseDevConfigPrompt()\n  return reuse ? partnersResponse : undefined\n}\n\nexport async function ensureThemeExtensionDevContext(\n  extension: ExtensionInstance,\n  apiKey: string,\n  developerPlatformClient: DeveloperPlatformClient,\n): Promise<ExtensionRegistration> {\n  const remoteSpecifications = await developerPlatformClient.appExtensionRegistrations({\n    id: apiKey,\n    apiKey,\n    organizationId: '1',\n  })\n  const remoteRegistrations = remoteSpecifications.app.extensionRegistrations.filter((extension) => {\n    return extension.type === 'THEME_APP_EXTENSION'\n  })\n\n  if (remoteRegistrations.length > 0) {\n    return remoteRegistrations[0]!\n  }\n\n  const registration = await createExtension(apiKey, extension.graphQLType, extension.handle, developerPlatformClient)\n\n  return registration\n}\n\nexport interface DeployContextOptions {\n  app: AppInterface\n  apiKey?: string\n  reset: boolean\n  force: boolean\n  noRelease: boolean\n  commitReference?: string\n  developerPlatformClient: DeveloperPlatformClient\n}\n\n/**\n * Make sure there is a valid context to execute `deploy`\n * That means we have a valid session, organization and app.\n *\n * If there is an API key via flag, configuration or env file, we check if it is valid. Otherwise, throw an error.\n * If there is no API key (or is invalid), show prompts to select an org and app.\n * Finally, the info is updated in the env file.\n *\n * @param options - Current dev context options\n * @param developerPlatformClient - The client to access the platform API\n * @returns The selected org, app and dev store\n */\nexport async function ensureDeployContext(options: DeployContextOptions): Promise<DeployContextOutput> {\n  const {reset, force, noRelease, developerPlatformClient} = options\n  const [remoteApp] = await fetchAppAndIdentifiers(options, developerPlatformClient)\n\n  const specifications = await fetchSpecifications({developerPlatformClient, apiKey: remoteApp.apiKey})\n  const app: AppInterface = await loadApp({\n    specifications,\n    directory: options.app.directory,\n    configName: getAppConfigurationShorthand(options.app.configuration.path),\n    remoteFlags: remoteApp.flags,\n  })\n\n  const org = await fetchOrgFromId(remoteApp.organizationId, developerPlatformClient)\n\n  await ensureIncludeConfigOnDeploy({org, app, remoteApp, reset, force})\n\n  const identifiers = await ensureDeploymentIdsPresence({\n    app,\n    appId: remoteApp.apiKey,\n    appName: remoteApp.title,\n    force,\n    release: !noRelease,\n    developerPlatformClient,\n    envIdentifiers: getAppIdentifiers({app}),\n    remoteApp,\n  })\n\n  // eslint-disable-next-line no-param-reassign\n  options = {\n    ...options,\n    app: await updateAppIdentifiers({app, identifiers, command: 'deploy'}),\n  }\n\n  const result: DeployContextOutput = {\n    app: options.app,\n    remoteApp: {\n      id: remoteApp.id,\n      apiKey: remoteApp.apiKey,\n      title: remoteApp.title,\n      appType: remoteApp.appType,\n      organizationId: remoteApp.organizationId,\n      grantedScopes: remoteApp.grantedScopes,\n      flags: remoteApp.flags,\n    },\n    identifiers,\n    release: !noRelease,\n  }\n\n  await logMetadataForLoadedContext({\n    organizationId: result.remoteApp.organizationId,\n    apiKey: result.identifiers.app,\n  })\n  return result\n}\n\nexport interface DraftExtensionsPushOptions {\n  directory: string\n  apiKey?: string\n  reset: boolean\n  config?: string\n  enableDeveloperPreview: boolean\n  developerPlatformClient?: DeveloperPlatformClient\n}\n\nexport async function ensureDraftExtensionsPushContext(draftExtensionsPushOptions: DraftExtensionsPushOptions) {\n  const developerPlatformClient = draftExtensionsPushOptions.developerPlatformClient ?? selectDeveloperPlatformClient()\n\n  const specifications = await loadLocalExtensionsSpecifications()\n\n  const app: AppInterface = await loadApp({\n    specifications,\n    directory: draftExtensionsPushOptions.directory,\n    configName: draftExtensionsPushOptions.config,\n  })\n\n  const [remoteApp] = await fetchAppAndIdentifiers({...draftExtensionsPushOptions, app}, developerPlatformClient)\n\n  const org = await fetchOrgFromId(remoteApp.organizationId, developerPlatformClient)\n\n  await ensureIncludeConfigOnDeploy({\n    org,\n    app,\n    remoteApp,\n    reset: draftExtensionsPushOptions.reset,\n    force: true,\n  })\n\n  const prodEnvIdentifiers = getAppIdentifiers({app})\n\n  const {extensionIds: remoteExtensionIds} = await ensureDeploymentIdsPresence({\n    app,\n    remoteApp,\n    appId: remoteApp.apiKey,\n    appName: remoteApp.title,\n    force: true,\n    release: true,\n    developerPlatformClient,\n    envIdentifiers: prodEnvIdentifiers,\n  })\n\n  await logMetadataForLoadedContext({\n    organizationId: remoteApp.organizationId,\n    apiKey: remoteApp.apiKey,\n  })\n\n  return {app, developerPlatformClient, remoteExtensionIds, remoteApp}\n}\n\ninterface ShouldOrPromptIncludeConfigDeployOptions {\n  appDirectory: string\n  localApp: AppInterface\n}\n\nasync function ensureIncludeConfigOnDeploy({\n  org,\n  app,\n  remoteApp,\n  reset,\n  force,\n}: {\n  org: Organization\n  app: AppInterface\n  remoteApp: OrganizationApp\n  reset: boolean\n  force: boolean\n}) {\n  let previousIncludeConfigOnDeploy = app.includeConfigOnDeploy\n  if (reset) previousIncludeConfigOnDeploy = undefined\n  if (force) previousIncludeConfigOnDeploy = previousIncludeConfigOnDeploy ?? false\n\n  renderCurrentlyUsedConfigInfo({\n    org: org.businessName,\n    appName: remoteApp.title,\n    appDotEnv: app.dotenv?.path,\n    configFile: isCurrentAppSchema(app.configuration) ? basename(app.configuration.path) : undefined,\n    resetMessage: resetHelpMessage,\n    includeConfigOnDeploy: previousIncludeConfigOnDeploy,\n  })\n\n  if (force || previousIncludeConfigOnDeploy !== undefined) return\n  await promptIncludeConfigOnDeploy({\n    appDirectory: app.directory,\n    localApp: app,\n  })\n}\n\nasync function promptIncludeConfigOnDeploy(options: ShouldOrPromptIncludeConfigDeployOptions) {\n  const shouldIncludeConfigDeploy = await includeConfigOnDeployPrompt(options.localApp.configuration.path)\n  const localConfiguration = options.localApp.configuration as CurrentAppConfiguration\n  localConfiguration.build = {\n    ...localConfiguration.build,\n    include_config_on_deploy: shouldIncludeConfigDeploy,\n  }\n\n  await writeAppConfigurationFile(localConfiguration, options.localApp.configSchema)\n\n  await metadata.addPublicMetadata(() => ({cmd_deploy_confirm_include_config_used: shouldIncludeConfigDeploy}))\n}\n\nfunction includeConfigOnDeployPrompt(configPath: string): Promise<boolean> {\n  return renderConfirmationPrompt({\n    message: `Include \\`${basename(configPath)}\\` configuration on \\`deploy\\`?`,\n    confirmationMessage: 'Yes, always (Recommended)',\n    cancellationMessage: 'No, never',\n  })\n}\n\n/**\n * Make sure there is a valid context to execute `release`\n * That means we have a valid session, organization and app.\n *\n * If there is an API key via flag, configuration or env file, we check if it is valid. Otherwise, throw an error.\n * If there is no API key (or is invalid), show prompts to select an org and app.\n * Finally, the info is updated in the env file.\n *\n * @param options - Current dev context options\n * @returns The selected org, app and dev store\n */\nexport async function ensureReleaseContext(options: ReleaseContextOptions): Promise<ReleaseContextOutput> {\n  const developerPlatformClient = options.developerPlatformClient ?? selectDeveloperPlatformClient()\n  const [remoteApp, envIdentifiers] = await fetchAppAndIdentifiers(options, developerPlatformClient)\n  const identifiers: Identifiers = envIdentifiers as Identifiers\n\n  // eslint-disable-next-line no-param-reassign\n  options = {\n    ...options,\n    app: await updateAppIdentifiers({app: options.app, identifiers, command: 'release'}),\n  }\n  const result = {\n    app: options.app,\n    apiKey: remoteApp.apiKey,\n    remoteApp,\n    developerPlatformClient,\n  }\n\n  await logMetadataForLoadedContext({organizationId: remoteApp.organizationId, apiKey: remoteApp.apiKey})\n  return result\n}\n\ninterface VersionListContextOptions {\n  app: AppInterface\n  apiKey?: string\n  reset: false\n  developerPlatformClient?: DeveloperPlatformClient\n}\n\ninterface VersionsListContextOutput {\n  developerPlatformClient: DeveloperPlatformClient\n  remoteApp: OrganizationApp\n}\n\n/**\n * Make sure there is a valid context to execute `versions list`\n *\n * If there is an API key via flag, configuration or env file, we check if it is valid. Otherwise, throw an error.\n * If there is no API key (or is invalid), show prompts to select an org and app.\n *\n * @param options - Current dev context options\n * @returns The Developer Platform client and the app\n */\nexport async function ensureVersionsListContext(\n  options: VersionListContextOptions,\n): Promise<VersionsListContextOutput> {\n  const developerPlatformClient = options.developerPlatformClient ?? selectDeveloperPlatformClient()\n  const [remoteApp] = await fetchAppAndIdentifiers(options, developerPlatformClient)\n\n  await logMetadataForLoadedContext({organizationId: remoteApp.organizationId, apiKey: remoteApp.apiKey})\n  return {\n    developerPlatformClient,\n    remoteApp,\n  }\n}\n\nexport async function fetchOrCreateOrganizationApp(\n  app: AppInterface,\n  developerPlatformClient: DeveloperPlatformClient,\n  directory?: string,\n): Promise<OrganizationApp> {\n  const orgId = await selectOrg(developerPlatformClient)\n  const {organization, apps, hasMorePages} = await developerPlatformClient.orgAndApps(orgId)\n  const isLaunchable = appIsLaunchable(app)\n  const scopesArray = getAppScopesArray(app.configuration)\n  const remoteApp = await selectOrCreateApp(app.name, apps, hasMorePages, organization, developerPlatformClient, {\n    isLaunchable,\n    scopesArray,\n    directory,\n  })\n\n  await logMetadataForLoadedContext({organizationId: remoteApp.organizationId, apiKey: remoteApp.apiKey})\n\n  return remoteApp\n}\n\nexport async function fetchAppAndIdentifiers(\n  options: {\n    app: AppInterface\n    reset: boolean\n    apiKey?: string\n  },\n  developerPlatformClient: DeveloperPlatformClient,\n  reuseFromDev = true,\n): Promise<[OrganizationApp, Partial<UuidOnlyIdentifiers>]> {\n  const app = options.app\n  let reuseDevCache = reuseFromDev\n  let envIdentifiers = getAppIdentifiers({app})\n  let remoteApp: OrganizationApp | undefined\n\n  if (options.reset) {\n    envIdentifiers = {app: undefined, extensions: {}}\n    reuseDevCache = false\n    const configuration = await link({directory: app.directory, developerPlatformClient})\n    app.configuration = configuration\n  }\n\n  if (isCurrentAppSchema(app.configuration)) {\n    const apiKey = options.apiKey ?? app.configuration.client_id\n    remoteApp = await appFromId({apiKey, developerPlatformClient})\n  } else if (options.apiKey) {\n    remoteApp = await appFromId({apiKey: options.apiKey, developerPlatformClient})\n  } else if (envIdentifiers.app) {\n    remoteApp = await appFromId({apiKey: envIdentifiers.app, developerPlatformClient})\n  } else if (reuseDevCache) {\n    remoteApp = await fetchDevAppAndPrompt(app, developerPlatformClient)\n  }\n\n  if (!remoteApp) {\n    remoteApp = await fetchOrCreateOrganizationApp(app, developerPlatformClient)\n  }\n\n  await logMetadataForLoadedContext({organizationId: remoteApp.organizationId, apiKey: remoteApp.apiKey})\n\n  return [remoteApp, envIdentifiers]\n}\n\n/**\n * Any data sent via input flags takes precedence and needs to be validated.\n * If any of the inputs is invalid, we must throw an error and stop the execution.\n */\nasync function fetchDevDataFromOptions(\n  options: DevContextOptions,\n  orgId: string,\n  developerPlatformClient: DeveloperPlatformClient,\n): Promise<{app?: OrganizationApp; store?: OrganizationStore}> {\n  const [selectedApp, orgWithStore] = await Promise.all([\n    (async () => {\n      let selectedApp: OrganizationApp | undefined\n      if (options.apiKey) {\n        selectedApp = await appFromId({apiKey: options.apiKey, developerPlatformClient})\n        if (!selectedApp) {\n          const errorMessage = InvalidApiKeyErrorMessage(options.apiKey)\n          throw new AbortError(errorMessage.message, errorMessage.tryMessage)\n        }\n        return selectedApp\n      }\n    })(),\n    (async () => {\n      if (options.storeFqdn) {\n        const orgWithStore = await fetchStoreByDomain(orgId, options.storeFqdn, developerPlatformClient)\n        if (!orgWithStore) throw new AbortError(`Could not find Organization for id ${orgId}.`)\n        if (!orgWithStore.store) {\n          const partners = await partnersFqdn()\n          const org = orgWithStore.organization\n          throw new AbortError(\n            `Could not find ${options.storeFqdn} in the Organization ${org.businessName} as a valid store.`,\n            `Visit https://${partners}/${org.id}/stores to create a new development or Shopify Plus sandbox store in your organization`,\n          )\n        }\n        return orgWithStore as {store: OrganizationStore; organization: Organization}\n      }\n    })(),\n  ])\n  let selectedStore: OrganizationStore | undefined\n\n  if (options.storeFqdn) {\n    selectedStore = orgWithStore!.store\n    await convertToTestStoreIfNeeded(selectedStore, orgWithStore!.organization.id, developerPlatformClient)\n  }\n\n  return {app: selectedApp, store: selectedStore}\n}\n\nexport interface AppContext {\n  configuration: AppConfiguration\n  cachedInfo?: CachedAppInfo\n  remoteApp?: OrganizationApp\n}\n\n/**\n * Retrieve app info from the cache or the current configuration.\n *\n * @param reset - Whether to reset the cache or not.\n * @param directory - The directory containing the app.\n * @param developerPlatformClient - The client to access the platform API\n */\nexport async function getAppContext({\n  reset,\n  directory,\n  developerPlatformClient,\n  configName,\n  promptLinkingApp = true,\n}: {\n  reset: boolean\n  directory: string\n  developerPlatformClient: DeveloperPlatformClient\n  configName?: string\n  promptLinkingApp?: boolean\n}): Promise<AppContext> {\n  const previousCachedInfo = getCachedAppInfo(directory)\n\n  if (reset) clearCachedAppInfo(directory)\n\n  const firstTimeSetup = previousCachedInfo === undefined\n  const usingConfigAndResetting = previousCachedInfo?.configFile && reset\n  const usingConfigWithNoTomls =\n    previousCachedInfo?.configFile && (await glob(joinPath(directory, 'shopify.app*.toml'))).length === 0\n\n  if (promptLinkingApp && (firstTimeSetup || usingConfigAndResetting || usingConfigWithNoTomls)) {\n    await link({directory, baseConfigName: previousCachedInfo?.configFile}, false)\n  }\n\n  let cachedInfo = getCachedAppInfo(directory)\n\n  const {configuration} = await loadAppConfiguration({\n    directory,\n    configName,\n  })\n\n  let remoteApp\n  if (isCurrentAppSchema(configuration)) {\n    remoteApp = await appFromId({\n      apiKey: configuration.client_id,\n      organizationId: configuration.organization_id,\n      developerPlatformClient,\n    })\n    cachedInfo = {\n      ...cachedInfo,\n      directory,\n      configFile: basename(configuration.path),\n      orgId: remoteApp.organizationId,\n      appId: remoteApp.apiKey,\n      title: remoteApp.title,\n      storeFqdn: configuration.build?.dev_store_url,\n      updateURLs: configuration.build?.automatically_update_urls_on_dev,\n    }\n\n    await logMetadataForLoadedContext({organizationId: remoteApp.organizationId, apiKey: remoteApp.apiKey})\n  }\n\n  return {\n    configuration,\n    cachedInfo,\n    remoteApp,\n  }\n}\n\n/**\n * Fetch all orgs the user belongs to and show a prompt to select one of them\n * @param developerPlatformClient - The client to access the platform API\n * @returns The selected organization ID\n */\nexport async function selectOrg(developerPlatformClient: DeveloperPlatformClient): Promise<string> {\n  const orgs = await fetchOrganizations(developerPlatformClient)\n  const org = await selectOrganizationPrompt(orgs)\n  return org.id\n}\n\ninterface ReusedValuesOptions {\n  organization: Organization\n  selectedApp: OrganizationApp\n  selectedStore: OrganizationStore\n  cachedInfo?: CachedAppInfo\n}\n\n/**\n * Message shown to the user in case we are reusing a previous configuration\n */\nfunction showReusedDevValues({organization, selectedApp, selectedStore, cachedInfo}: ReusedValuesOptions) {\n  if (!cachedInfo) return\n\n  let updateURLs = 'Not yet configured'\n  if (cachedInfo.updateURLs !== undefined) updateURLs = cachedInfo.updateURLs ? 'Yes' : 'No'\n\n  renderCurrentlyUsedConfigInfo({\n    org: organization.businessName,\n    appName: selectedApp.title,\n    devStore: selectedStore.shopDomain,\n    updateURLs,\n    configFile: cachedInfo.configFile,\n    resetMessage: resetHelpMessage,\n  })\n}\n\ninterface CurrentlyUsedConfigInfoOptions {\n  org: string\n  appName: string\n  devStore?: string\n  updateURLs?: string\n  configFile?: string\n  appDotEnv?: string\n  includeConfigOnDeploy?: boolean\n  resetMessage?: (\n    | string\n    | {\n        command: string\n      }\n  )[]\n}\n\nexport function renderCurrentlyUsedConfigInfo({\n  org,\n  appName,\n  devStore,\n  updateURLs,\n  configFile,\n  appDotEnv,\n  resetMessage,\n  includeConfigOnDeploy,\n}: CurrentlyUsedConfigInfoOptions): void {\n  const items = [`Org:             ${org}`, `App:             ${appName}`]\n\n  if (devStore) items.push(`Dev store:       ${devStore}`)\n  if (updateURLs) items.push(`Update URLs:     ${updateURLs}`)\n  if (includeConfigOnDeploy !== undefined) items.push(`Include config:  ${includeConfigOnDeploy ? 'Yes' : 'No'}`)\n\n  let body: TokenItem = [{list: {items}}]\n  if (resetMessage) body = [...body, '\\n', ...resetMessage]\n\n  const fileName = (appDotEnv && basename(appDotEnv)) || (configFile && getAppConfigurationFileName(configFile))\n\n  renderInfo({\n    headline: configFile ? `Using ${fileName}:` : 'Using these settings:',\n    body,\n  })\n}\n\nfunction showReusedGenerateValues(org: string, cachedAppInfo: CachedAppInfo) {\n  renderCurrentlyUsedConfigInfo({\n    org,\n    appName: cachedAppInfo.title!,\n    configFile: cachedAppInfo.configFile,\n    resetMessage: resetHelpMessage,\n  })\n}\n\n/**\n * Message shown to the user in case we are reusing a previous configuration\n * @param org - Organization name\n * @param app - App name\n * @param store - Store domain\n */\nfunction showDevValues(org: string, appName: string) {\n  renderInfo({\n    headline: 'Your configs for dev were:',\n    body: {\n      list: {\n        items: [`Org:        ${org}`, `App:        ${appName}`],\n      },\n    },\n  })\n}\n\nexport async function logMetadataForLoadedContext(app: {organizationId: string; apiKey: string}) {\n  await metadata.addPublicMetadata(() => ({\n    partner_id: tryParseInt(app.organizationId),\n    api_key: app.apiKey,\n  }))\n}\n\nexport async function enableDeveloperPreview({\n  apiKey,\n  developerPlatformClient,\n}: {\n  apiKey: string\n  developerPlatformClient: DeveloperPlatformClient\n}) {\n  return developerPreviewUpdate({apiKey, developerPlatformClient, enabled: true})\n}\n\nexport async function disableDeveloperPreview({\n  apiKey,\n  developerPlatformClient,\n}: {\n  apiKey: string\n  developerPlatformClient: DeveloperPlatformClient\n}) {\n  await developerPreviewUpdate({apiKey, developerPlatformClient, enabled: false})\n}\n\nexport async function developerPreviewUpdate({\n  apiKey,\n  developerPlatformClient,\n  enabled,\n}: {\n  apiKey: string\n  developerPlatformClient: DeveloperPlatformClient\n  enabled: boolean\n}) {\n  const input: DevelopmentStorePreviewUpdateInput = {\n    input: {\n      apiKey,\n      enabled,\n    },\n  }\n  const result: DevelopmentStorePreviewUpdateSchema = await developerPlatformClient.updateDeveloperPreview(input)\n  const userErrors = result.developmentStorePreviewUpdate.userErrors\n  return !userErrors || userErrors.length === 0\n}\n"]}