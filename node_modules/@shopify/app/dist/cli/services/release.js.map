{"version":3,"file":"release.js","sourceRoot":"","sources":["../../../src/cli/services/release.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,oBAAoB,EAAC,MAAM,cAAc,CAAA;AACjD,OAAO,EACL,oCAAoC,EACpC,qCAAqC,GACtC,MAAM,mCAAmC,CAAA;AAG1C,OAAO,EAAC,iCAAiC,EAAC,MAAM,8BAA8B,CAAA;AAC9E,OAAO,EAAC,WAAW,EAAE,aAAa,EAAE,WAAW,EAAY,MAAM,0BAA0B,CAAA;AAC3F,OAAO,EAAC,gBAAgB,EAAC,MAAM,6BAA6B,CAAA;AAmB5D,MAAM,CAAC,KAAK,UAAU,OAAO,CAAC,OAAuB;IACnD,MAAM,EAAC,uBAAuB,EAAE,GAAG,EAAE,SAAS,EAAC,GAAG,MAAM,oBAAoB,CAAC,OAAO,CAAC,CAAA;IAErF,MAAM,EAAC,6BAA6B,EAAE,cAAc,EAAC,GAAG,MAAM,qCAAqC,CACjG,uBAAuB,EACvB,SAAS,CAAC,MAAM,EAChB,OAAO,CAAC,OAAO,CAChB,CAAA;IACD,MAAM,mCAAmC,GAAG,MAAM,oCAAoC,CAAC;QACrF,uBAAuB;QACvB,MAAM,EAAE,SAAS,CAAC,MAAM;QACxB,QAAQ,EAAE,GAAG;QACb,SAAS;QACT,iBAAiB,EAAE,cAAc,CAAC,iBAAiB,CAAC,GAAG,CAAC,CAAC,gBAAgB,EAAE,EAAE,CAAC,CAAC;YAC7E,GAAG,gBAAgB;YACnB,GAAG,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,CAAC,EAAC,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,MAAM,CAAC,EAAC,CAAC,CAAC,CAAC,EAAE,CAAC;SAClF,CAAC,CAAC;QACH,OAAO,EAAE,IAAI;KACd,CAAC,CAAA;IACF,MAAM,SAAS,GAAG,MAAM,iCAAiC,CAAC;QACxD,mCAAmC;QACnC,6BAA6B;QAC7B,QAAQ,EAAE,SAAS,CAAC,KAAK;QACzB,OAAO,EAAE,IAAI;QACb,KAAK,EAAE,OAAO,CAAC,KAAK;KACrB,CAAC,CAAA;IACF,IAAI,CAAC,SAAS;QAAE,MAAM,IAAI,gBAAgB,EAAE,CAAA;IAK5C,MAAM,SAAS,GAAwB;QACrC,MAAM,EAAE,SAAS,CAAC,MAAM;QACxB,YAAY,EAAE,cAAc,CAAC,EAAE;KAChC,CAAA;IAED,MAAM,KAAK,GAAG;QACZ;YACE,KAAK,EAAE,mBAAmB;YAC1B,IAAI,EAAE,KAAK,EAAE,OAAgB,EAAE,EAAE;gBAC/B,OAAO,CAAC,UAAU,GAAG,MAAM,uBAAuB,CAAC,OAAO,CAAC,SAAS,CAAC,CAAA;YACvE,CAAC;SACF;KACF,CAAA;IAED,MAAM,EACJ,UAAU,EAAE,EAAC,UAAU,EAAE,OAAO,EAAC,GAClC,GAAG,MAAM,WAAW,CAAU,KAAK,CAAC,CAAA;IAErC,MAAM,cAAc,GAAc;QAChC,EAAC,IAAI,EAAE,EAAC,KAAK,EAAE,cAAc,CAAC,UAAU,EAAE,GAAG,EAAE,cAAc,CAAC,QAAQ,EAAC,EAAC;QACxE,cAAc,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK,cAAc,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC,EAAE;KAC5D,CAAA;IAED,IAAI,OAAO,CAAC,UAAU,EAAE,MAAM,GAAG,CAAC,EAAE;QAClC,WAAW,CAAC;YACV,QAAQ,EAAE,+BAA+B;YACzC,IAAI,EAAE;gBACJ,GAAG,cAAc;gBACjB,GAAG,cAAc,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,GAAG,OAAO,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;aAC3G;SACF,CAAC,CAAA;KACH;SAAM;QACL,aAAa,CAAC;YACZ,QAAQ,EAAE,4BAA4B;YACtC,IAAI,EAAE,cAAc;SACrB,CAAC,CAAA;KACH;AACH,CAAC","sourcesContent":["import {ensureReleaseContext} from './context.js'\nimport {\n  configExtensionsIdentifiersBreakdown,\n  extensionsIdentifiersReleaseBreakdown,\n} from './context/breakdown-extensions.js'\nimport {AppInterface} from '../models/app/app.js'\nimport {AppReleaseSchema, AppReleaseVariables} from '../api/graphql/app_release.js'\nimport {deployOrReleaseConfirmationPrompt} from '../prompts/deploy-release.js'\nimport {renderError, renderSuccess, renderTasks, TokenItem} from '@shopify/cli-kit/node/ui'\nimport {AbortSilentError} from '@shopify/cli-kit/node/error'\n\ninterface ReleaseOptions {\n  /** The app to be built and uploaded */\n  app: AppInterface\n\n  /** API key of the app in Partners admin */\n  apiKey?: string\n\n  /** If true, ignore any cached appId or extensionId */\n  reset: boolean\n\n  /** If true, proceed with deploy without asking for confirmation */\n  force: boolean\n\n  /** App version tag */\n  version: string\n}\n\nexport async function release(options: ReleaseOptions) {\n  const {developerPlatformClient, app, remoteApp} = await ensureReleaseContext(options)\n\n  const {extensionIdentifiersBreakdown, versionDetails} = await extensionsIdentifiersReleaseBreakdown(\n    developerPlatformClient,\n    remoteApp.apiKey,\n    options.version,\n  )\n  const configExtensionIdentifiersBreakdown = await configExtensionsIdentifiersBreakdown({\n    developerPlatformClient,\n    apiKey: remoteApp.apiKey,\n    localApp: app,\n    remoteApp,\n    versionAppModules: versionDetails.appModuleVersions.map((appModuleVersion) => ({\n      ...appModuleVersion,\n      ...(appModuleVersion.config ? {config: JSON.parse(appModuleVersion.config)} : {}),\n    })),\n    release: true,\n  })\n  const confirmed = await deployOrReleaseConfirmationPrompt({\n    configExtensionIdentifiersBreakdown,\n    extensionIdentifiersBreakdown,\n    appTitle: remoteApp.title,\n    release: true,\n    force: options.force,\n  })\n  if (!confirmed) throw new AbortSilentError()\n  interface Context {\n    appRelease: AppReleaseSchema\n  }\n\n  const variables: AppReleaseVariables = {\n    apiKey: remoteApp.apiKey,\n    appVersionId: versionDetails.id,\n  }\n\n  const tasks = [\n    {\n      title: 'Releasing version',\n      task: async (context: Context) => {\n        context.appRelease = await developerPlatformClient.release(variables)\n      },\n    },\n  ]\n\n  const {\n    appRelease: {appRelease: release},\n  } = await renderTasks<Context>(tasks)\n\n  const linkAndMessage: TokenItem = [\n    {link: {label: versionDetails.versionTag, url: versionDetails.location}},\n    versionDetails.message ? `\\n${versionDetails.message}` : '',\n  ]\n\n  if (release.userErrors?.length > 0) {\n    renderError({\n      headline: \"Version couldn't be released.\",\n      body: [\n        ...linkAndMessage,\n        `${linkAndMessage.length > 0 ? '\\n\\n' : ''}${release.userErrors.map((error) => error.message).join(', ')}`,\n      ],\n    })\n  } else {\n    renderSuccess({\n      headline: 'Version released to users.',\n      body: linkAndMessage,\n    })\n  }\n}\n"]}