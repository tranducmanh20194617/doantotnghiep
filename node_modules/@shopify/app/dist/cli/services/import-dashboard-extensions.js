import { fetchAppAndIdentifiers, logMetadataForLoadedContext } from './context.js';
import { ensureExtensionDirectoryExists } from './extensions/common.js';
import { getActiveDashboardExtensions } from './fetch-dashboard-extensions.js';
import { updateAppIdentifiers } from '../models/app/identifiers.js';
import { selectDeveloperPlatformClient } from '../utilities/developer-platform-client.js';
import { renderSelectPrompt, renderSuccess } from '@shopify/cli-kit/node/ui';
import { basename, joinPath } from '@shopify/cli-kit/node/path';
import { writeFile } from '@shopify/cli-kit/node/fs';
import { outputContent } from '@shopify/cli-kit/node/output';
export async function importDashboardExtensions(options) {
    const developerPlatformClient = options.developerPlatformClient ?? selectDeveloperPlatformClient();
    const [remoteApp, _] = await fetchAppAndIdentifiers({ ...options, reset: false }, developerPlatformClient, false);
    await logMetadataForLoadedContext(remoteApp);
    const extensions = await getActiveDashboardExtensions({
        developerPlatformClient,
        apiKey: remoteApp.apiKey,
        organizationId: remoteApp.organizationId,
        extensionTypes: options.extensionTypes,
    });
    if (extensions.length === 0) {
        renderSuccess({ headline: ['No extensions to migrate.'] });
        return;
    }
    const choices = extensions.map((ext) => {
        return { label: ext.title, value: ext.uuid };
    });
    choices.push({ label: 'All', value: 'All' });
    const promptAnswer = await renderSelectPrompt({ message: 'Extensions to migrate', choices });
    const extensionsToMigrate = promptAnswer === 'All' ? extensions : [extensions.find((ext) => ext?.uuid === promptAnswer)];
    const extensionUuids = {};
    const importPromises = extensionsToMigrate.map(async (ext) => {
        const directory = await ensureExtensionDirectoryExists({ app: options.app, name: ext.title });
        const tomlObject = options.buildTomlObject(ext);
        const path = joinPath(directory, 'shopify.extension.toml');
        await writeFile(path, tomlObject);
        extensionUuids[ext.title] = ext.uuid;
        return { extension: ext, directory: joinPath('extensions', basename(directory)) };
    });
    const generatedExtensions = await Promise.all(importPromises);
    renderSuccessMessages(generatedExtensions);
    await updateAppIdentifiers({
        app: options.app,
        identifiers: { extensions: extensionUuids, app: remoteApp.apiKey },
        command: 'deploy',
    });
}
function renderSuccessMessages(generatedExtensions) {
    renderSuccess({
        headline: ['Imported the following extensions from the dashboard:'],
        body: generatedExtensions
            .map((gen) => {
            return outputContent `â€¢ "${gen.extension.title}" at: ${gen.directory}`.value;
        })
            .join('\n'),
    });
}
//# sourceMappingURL=import-dashboard-extensions.js.map